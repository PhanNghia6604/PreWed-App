package com.example.demo.service;

import com.example.demo.entity.Blog;
import com.example.demo.entity.User;
import com.example.demo.entity.request.BlogRequest;
import com.example.demo.entity.response.BlogResponse;
import com.example.demo.repository.BlogRepository;
import com.example.demo.repository.UserRepository;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;
import org.springframework.web.multipart.MultipartFile;

import java.io.IOException;
import java.nio.file.Files;
import java.nio.file.Path;
import java.nio.file.Paths;
import java.time.LocalDateTime;
import java.util.List;
import java.util.stream.Collectors;

@Service
public class BlogService {

    @Autowired
    private BlogRepository blogRepository;

    @Autowired
    private UserRepository userRepository;

    // ƒê∆∞·ªùng d·∫´n th∆∞ m·ª•c l∆∞u tr·ªØ ·∫£nh
    private static final String UPLOAD_DIR = "C:/Users/phamg/Downloads/PreWed-App-main (1)/PreWed-App-main/uploads/";
    // L∆∞u tr·ªØ ·∫£nh trong th∆∞ m·ª•c uploads t·∫°i th∆∞ m·ª•c g·ªëc c·ªßa d·ª± √°n


    /**
     * T·∫°o blog m·ªõi
     */
    public BlogResponse createBlog(BlogRequest request) {
        System.out.println("Nh·∫≠n request: " + request); // üü¢ In ra ƒë·ªÉ ki·ªÉm tra request c√≥ ƒë·∫øn kh√¥ng

        // T√¨m t√°c gi·∫£ t·ª´ ID
        User author = userRepository.findById(request.getAuthorId())
                .orElseThrow(() -> new RuntimeException("Author not found!"));

        // T·∫°o m·ªõi ƒë·ªëi t∆∞·ª£ng Blog v√† thi·∫øt l·∫≠p th√¥ng tin
        Blog blog = new Blog();
        blog.setTitle(request.getTitle());
        blog.setContent(request.getContent());
        blog.setAuthor(author);
        blog.setCreatedAt(LocalDateTime.now());
        blog.setDeleted(false);

        // X·ª≠ l√Ω ·∫£nh t·∫£i l√™n n·∫øu c√≥
        if (request.getImage() != null && !request.getImage().isEmpty()) {
            String imagePath = saveImage(request.getImage());  // L∆∞u ·∫£nh v√† l·∫•y ƒë∆∞·ªùng d·∫´n
            blog.setImagePath(imagePath);  // L∆∞u ƒë∆∞·ªùng d·∫´n ·∫£nh v√†o blog
        }

        // L∆∞u v√†o database
        Blog savedBlog = blogRepository.save(blog);
        System.out.println("Blog ƒë√£ l∆∞u: " + savedBlog); // üü¢ Ki·ªÉm tra log khi blog ƒë∆∞·ª£c l∆∞u

        // Tr·∫£ v·ªÅ th√¥ng tin blog ƒë√£ l∆∞u
        return new BlogResponse(
                savedBlog.getId(),
                savedBlog.getTitle(),
                savedBlog.getContent(),
                savedBlog.getAuthor().getName(),
                savedBlog.getCreatedAt(),
                savedBlog.getImagePath()  // Tr·∫£ v·ªÅ ƒë∆∞·ªùng d·∫´n ·∫£nh
        );
    }

    /**
     * L∆∞u ·∫£nh v√†o th∆∞ m·ª•c v√† tr·∫£ v·ªÅ ƒë∆∞·ªùng d·∫´n ·∫£nh
     */
    // S·ª≠a l·∫°i ƒë∆∞·ªùng d·∫´n tr·∫£ v·ªÅ th√†nh URL truy c·∫≠p t·ª´ frontend
    private String saveImage(MultipartFile image) {
        try {
            Path path = Paths.get(UPLOAD_DIR + image.getOriginalFilename());
            Files.createDirectories(path.getParent());  // T·∫°o th∆∞ m·ª•c n·∫øu ch∆∞a c√≥
            image.transferTo(path.toFile());

            // Chuy·ªÉn ƒë∆∞·ªùng d·∫´n file th√†nh URL truy c·∫≠p
            String url = "http://localhost:8080/uploads/" + image.getOriginalFilename();
            return url;
        } catch (IOException e) {
            e.printStackTrace();
            throw new RuntimeException("Could not save the image.");
        }
    }


    /**
     * L·∫•y danh s√°ch t·∫•t c·∫£ blog ch∆∞a b·ªã x√≥a
     */
    public List<BlogResponse> getAllBlogs() {
        List<Blog> blogs = blogRepository.findByIsDeletedFalse();

        // Chuy·ªÉn ƒë·ªïi t·ª´ Blog entity sang BlogResponse DTO
        return blogs.stream().map(blog -> new BlogResponse(
                blog.getId(),
                blog.getTitle(),
                blog.getContent(),
                blog.getAuthor().getName(),
                blog.getCreatedAt(),
                blog.getImagePath()  // Tr·∫£ v·ªÅ ƒë∆∞·ªùng d·∫´n ·∫£nh n·∫øu c√≥
        )).collect(Collectors.toList());
    }

    /**
     * L·∫•y th√¥ng tin chi ti·∫øt blog theo ID
     */
    public BlogResponse getBlogById(Long id) {
        Blog blog = blogRepository.findById(id)
                .orElseThrow(() -> new RuntimeException("Blog not found"));

        // Chuy·ªÉn Blog entity sang BlogResponse DTO
        return mapToResponse(blog);
    }

    /**
     * C·∫≠p nh·∫≠t blog theo ID
     */
    public BlogResponse updateBlog(Long id, String title, String content, MultipartFile image) {
        Blog blog = blogRepository.findById(id)
                .orElseThrow(() -> new RuntimeException("Blog not found"));

        blog.setTitle(title);
        blog.setContent(content);

        // Ki·ªÉm tra v√† c·∫≠p nh·∫≠t ·∫£nh n·∫øu c√≥
        if (image != null && !image.isEmpty()) {
            String imagePath = saveImage(image);
            blog.setImagePath(imagePath);  // C·∫≠p nh·∫≠t ƒë∆∞·ªùng d·∫´n ·∫£nh
        }

        Blog updatedBlog = blogRepository.save(blog);

        // Tr·∫£ v·ªÅ BlogResponse v·ªõi th√¥ng tin c·∫≠p nh·∫≠t
        return new BlogResponse(
                updatedBlog.getId(),
                updatedBlog.getTitle(),
                updatedBlog.getContent(),
                updatedBlog.getAuthor().getName(),
                updatedBlog.getCreatedAt(),
                updatedBlog.getImagePath()  // Tr·∫£ v·ªÅ ƒë∆∞·ªùng d·∫´n ·∫£nh
        );
    }

    /**
     * X√≥a blog (x√≥a m·ªÅm, kh√¥ng x√≥a vƒ©nh vi·ªÖn)
     */
    public BlogResponse deleteBlog(Long id) {
        Blog blog = blogRepository.findById(id)
                .orElseThrow(() -> new RuntimeException("Blog not found"));

        blog.setDeleted(true);
        Blog deletedBlog = blogRepository.save(blog);

        return new BlogResponse(
                deletedBlog.getId(),
                deletedBlog.getTitle(),
                deletedBlog.getContent(),
                deletedBlog.getAuthor().getName(),
                deletedBlog.getCreatedAt(),
                deletedBlog.getImagePath()  // Tr·∫£ v·ªÅ ƒë∆∞·ªùng d·∫´n ·∫£nh n·∫øu c√≥
        );
    }

    /**
     * Kh√¥i ph·ª•c blog ƒë√£ b·ªã x√≥a
     */
    public BlogResponse restoreBlog(Long id) {
        Blog blog = blogRepository.findById(id)
                .orElseThrow(() -> new RuntimeException("Blog not found"));

        if (!blog.isDeleted()) {
            throw new RuntimeException("Blog is already active!");
        }

        blog.setDeleted(false);
        Blog restoredBlog = blogRepository.save(blog);

        return mapToResponse(restoredBlog);
    }

    /**
     * Chuy·ªÉn Blog Entity -> BlogResponse DTO
     */
    private BlogResponse mapToResponse(Blog blog) {
        return new BlogResponse(
                blog.getId(),
                blog.getTitle(),
                blog.getContent(),
                blog.getAuthor().getName(),
                blog.getCreatedAt(),
                blog.getImagePath()  // Tr·∫£ v·ªÅ ƒë∆∞·ªùng d·∫´n ·∫£nh
        );
    }
}
