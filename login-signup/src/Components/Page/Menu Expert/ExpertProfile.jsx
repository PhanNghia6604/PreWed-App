import React, { useState, useEffect } from "react";
import { useNavigate } from "react-router-dom";
import styles from "./ExpertProfile.module.css";

const ExpertProfile = () => {
    const navigate = useNavigate();
    const [expertData, setExpertData] = useState(null);
    const [isEditing, setIsEditing] = useState(false);
    const [error, setError] = useState("");

    useEffect(() => {
        const fetchExpertData = async () => {
            const token = localStorage.getItem("token");
            let expertId = localStorage.getItem("expertId");
    
            if (!token || !expertId) {
                navigate("/expert-login");
                return;
            }
    
            try {
                const response = await fetch(`/api/expert/profile/${expertId}`, {
                    headers: { "Authorization": `Bearer ${token}` },
                });
    
                if (!response.ok) throw new Error("Kh√¥ng th·ªÉ t·∫£i th√¥ng tin chuy√™n gia.");
    
                const data = await response.json();
                console.log("D·ªØ li·ªáu chuy√™n gia:", data);  // üõ† Ki·ªÉm tra d·ªØ li·ªáu API tr·∫£ v·ªÅ
                setExpertData(data);
            } catch (err) {
                setError(err.message);
            }
        };
    
        setTimeout(fetchExpertData, 500); // Ch·ªù 0.5s ƒë·ªÉ ƒë·∫£m b·∫£o d·ªØ li·ªáu ƒë√£ ƒë∆∞·ª£c l∆∞u
    }, [navigate]);
    

    // X·ª≠ l√Ω thay ƒë·ªïi input
    const handleChange = (e, index, field) => {
        e.preventDefault();
        const { name, value } = e.target;
        if (field) {
            const updatedArray = [...expertData[field]];
            updatedArray[index] = value;
            setExpertData({ ...expertData, [field]: updatedArray });
        } else {
            setExpertData({ ...expertData, [name]: value });
        }
    };

    // X·ª≠ l√Ω t·∫£i ·∫£nh ƒë·∫°i di·ªán
    const handleImageUpload = (e) => {
        const file = e.target.files[0];
        if (!file) return;
    
        const reader = new FileReader();
        reader.readAsDataURL(file);
        reader.onload = () => {
            setExpertData({ ...expertData, avatar: reader.result }); // L∆∞u Base64 v√†o state
        };
        reader.onerror = (error) => console.error("L·ªói khi ƒë·ªçc file:", error);
    };
    

    // X·ª≠ l√Ω th√™m & x√≥a ph·∫ßn t·ª≠ c·ªßa m·∫£ng (ch·ª©ng ch·ªâ)
    const handleAddItem = (field) => {
        setExpertData({ ...expertData, [field]: [...expertData[field], ""] });
    };
    const handleRemoveItem = (index, field) => {
        const updatedArray = expertData[field].filter((_, i) => i !== index);
        setExpertData({ ...expertData, [field]: updatedArray });
    };

    // X·ª≠ l√Ω l∆∞u th√¥ng tin
    const handleSave = async () => {
        try {
            const token = localStorage.getItem("token");
            const expertId = localStorage.getItem("expertId");
    
            if (!expertData.name || !expertData.phone || !expertData.email || !expertData.specialty) {
                alert("Vui l√≤ng ƒëi·ªÅn ƒë·∫ßy ƒë·ªß th√¥ng tin!");
                return;
            }
            console.log("üîπ D·ªØ li·ªáu g·ª≠i l√™n API:", expertData);
            // Log d·ªØ li·ªáu g·ª≠i l√™n BE
            // console.log("üîπ Expert ID:", expertId);
            // console.log("üîπ Token:", token);
            // console.log("üîπ D·ªØ li·ªáu g·ª≠i l√™n API:", expertData);
    
            const response = await fetch("/api/expert/expert/update", {
                method: "PUT",
                headers: {
                    "Content-Type": "application/json",
                    "Authorization": `Bearer ${token}`, // N·∫øu API y√™u c·∫ßu token
                },
                body: JSON.stringify(expertData),
            });
            const result = await response.text(); // L·∫•y ph·∫£n h·ªìi chi ti·∫øt t·ª´ server
            if (!response.ok) throw new Error("Kh√¥ng th·ªÉ c·∫≠p nh·∫≠t th√¥ng tin.");
    
            alert("C·∫≠p nh·∫≠t th√†nh c√¥ng!");
            setIsEditing(false);
            
        } catch (err) {
            alert(err.message);
        }
    };
    
    const handleLogout = () => {
        localStorage.removeItem("expertId");
        localStorage.removeItem("token");
        localStorage.removeItem("userRole"); // X√≥a lu√¥n vai tr√≤ ng∆∞·ªùi d√πng n·∫øu c√≥
        navigate("/"); // Chuy·ªÉn v·ªÅ trang ƒëƒÉng nh·∫≠p
    };

    if (error) return <p className={styles.error}>{error}</p>;
    if (!expertData) return <p>ƒêang t·∫£i...</p>;

    return (
        <div className={styles["profile-container"]}>
            <h2>H·ªì s∆° chuy√™n gia</h2>
            <div className={styles["profile-form"]}>
                {/* ·∫¢nh ƒë·∫°i di·ªán */}
                <label>·∫¢nh ƒë·∫°i di·ªán:</label>
<div className={styles["avatar-container"]}>
    {expertData.avatar ? (
       <img 
       src={expertData.avatar} 
       alt="Avatar" 
       className={styles.avatar} 
       onError={(e) => { e.target.src = "https://via.placeholder.com/150"; }} // N·∫øu l·ªói, hi·ªÉn th·ªã ·∫£nh m·∫∑c ƒë·ªãnh
   />
    ) : (
        <div className={styles["avatar-placeholder"]}>Ch∆∞a c√≥ ·∫£nh</div>
    )}
    {isEditing && (
        <>
            <input type="file" accept="image/*" onChange={handleImageUpload} />
            <input
                type="text"
                name="avatar"
                value={expertData.avatar}
                onChange={(e) => setExpertData({ ...expertData, avatar: e.target.value })}
                placeholder="Nh·∫≠p URL ·∫£nh..."
            />
        </>
    )}
</div>

                {/* Th√¥ng tin c√° nh√¢n */}
                {["name", "phone", "address", "email", "specialty"].map((field) => (
                    <div key={field}>
                        <label>{field === "specialty" ? "Chuy√™n m√¥n" : field.charAt(0).toUpperCase() + field.slice(1)}:</label>
                        {isEditing ? (
                            <input type="text" name={field} value={expertData[field]} onChange={handleChange} />
                        ) : (
                            <p>{expertData[field]}</p>
                        )}
                    </div>
                ))}

                {/* Ch·ª©ng ch·ªâ */}
                <label>Ch·ª©ng ch·ªâ:</label>
                <ul>
                    {expertData.certificates.map((certificate, index) => (
                        <li key={index}>
                            {isEditing ? (
                                <>
                                    <input type="text" value={certificate} onChange={(e) => handleChange(e, index, "certificates")} />
                                    <button type="button" onClick={() => handleRemoveItem(index, "certificates")}>X√≥a</button>
                                </>
                            ) : (
                                certificate
                            )}
                        </li>
                    ))}
                </ul>
                {isEditing && <button type="button" onClick={() => handleAddItem("certificates")}>+ Th√™m ch·ª©ng ch·ªâ</button>}

                {/* N√∫t h√†nh ƒë·ªông */}
                {isEditing ? (
                    <button onClick={handleSave} className={styles["save-btn"]}>L∆∞u thay ƒë·ªïi</button>
                ) : (
                    <button onClick={() => setIsEditing(true)} className={styles["edit-btn"]}>Ch·ªânh s·ª≠a</button>
                )}
                <button onClick={handleLogout} className={styles["logout-btn"]}>ƒêƒÉng xu·∫•t</button>
            </div>
        </div>
    );
};

export default ExpertProfile;
