import React, { useEffect, useState } from "react";
import styles from "./ExpertAppointments.module.css";  // Import CSS Module

export const ExpertAppointments = () => {
    const [expert, setExpert] = useState(null);
    const [appointments, setAppointments] = useState([]);

    useEffect(() => {
        let loggedInExpertId = localStorage.getItem("loggedInExpertId");
    
        if (!loggedInExpertId) {
            console.warn("Kh√¥ng t√¨m th·∫•y loggedInExpertId, ƒëang ki·ªÉm tra l·∫°i...");
            return;
        }
    
        const storedExperts = JSON.parse(localStorage.getItem("experts")) || [];
        const expertData = storedExperts.find(exp => String(exp.id) === String(loggedInExpertId));
    
        if (!expertData) {
            console.warn("Kh√¥ng t√¨m th·∫•y chuy√™n gia trong danh s√°ch, c√≥ th·ªÉ ID sai.");
            return;
        }
    
        setExpert(expertData);
    
        const allBookings = Object.keys(localStorage)
            .filter((key) => key.startsWith("bookings_"))
            .flatMap((key) => JSON.parse(localStorage.getItem(key)) || []);
    
        const expertAppointments = allBookings.filter(
            (booking) => String(booking.expertId) === String(loggedInExpertId)
        );
    
        const updatedAppointments = expertAppointments.map((appt) => {
            const userData = JSON.parse(localStorage.getItem("user_" + appt.userId)) || {};
            return {
                ...appt,
                status: appt.status === "ƒê√£ thanh to√°n" ? "Ch∆∞a b·∫Øt ƒë·∫ßu t∆∞ v·∫•n" : appt.status,
                fullName: userData.fullName || "Kh√¥ng r√µ",
            };
        });
    
        setAppointments(updatedAppointments);
    
    }, []);


    const handleUpdateStatus = (id, newStatus) => {
        const updatedAppointments = appointments.map((appt) =>
            appt.id === id ? { ...appt, status: newStatus } : appt
        );
        setAppointments(updatedAppointments);

        // C·∫≠p nh·∫≠t t·ª´ng userBooking trong localStorage
        Object.keys(localStorage)
            .filter((key) => key.startsWith("bookings_"))
            .forEach((key) => {
                let userBookings = JSON.parse(localStorage.getItem(key)) || [];
                let updatedUserBookings = userBookings.map((b) =>
                    b.id === id ? { ...b, status: newStatus } : b
                );

                // Ki·ªÉm tra n·∫øu d·ªØ li·ªáu th·ª±c s·ª± thay ƒë·ªïi, th√¨ m·ªõi l∆∞u l·∫°i
                if (JSON.stringify(userBookings) !== JSON.stringify(updatedUserBookings)) {
                    localStorage.setItem(key, JSON.stringify(updatedUserBookings));
                }
            });

        console.log("ƒê√£ c·∫≠p nh·∫≠t tr·∫°ng th√°i m·ªõi:", newStatus);
    };

    if (!expert) return <div className={styles.notFound}>B·∫°n ch∆∞a ƒëƒÉng nh·∫≠p</div>;

    return (
        <div className={styles.container}>
            <h2>üìÖ L·ªãch h·∫πn c·ªßa t√¥i</h2>
            {appointments.length === 0 ? (
                <p>Kh√¥ng c√≥ l·ªãch h·∫πn n√†o.</p>
            ) : (
                <table className={styles.table}>
                    <thead>
                        <tr>
                            <th>Kh√°ch h√†ng</th>
                            <th>Th·ª©</th>
                            <th>Ng√†y</th>
                            <th>Th·ªùi gian</th>
                            <th>G√≥i d·ªãch v·ª•</th>
                            <th>Tr·∫°ng th√°i</th>
                            <th>H√†nh ƒë·ªông</th>
                        </tr>
                    </thead>
                    <tbody>
                        {appointments.map((appt) => (
                            <tr key={appt.id}>
                                <td>{appt.userName || "Kh√¥ng r√µ"}</td> {/* ‚úÖ Hi·ªÉn th·ªã fullName thay v√¨ userName */}
                                <td>{appt.dayOfWeek || "N/A"}</td>
                                <td>{appt.date}</td>
                                <td>{appt.time}</td>
                                <td>{appt.packageName}</td>
                                <td>{appt.status}</td>
                                <td>
                                    {appt.status === "Ch·ªù chuy√™n gia x√°c nh·∫≠n" && (
                                        <>
                                            <button className={styles.confirmButton} onClick={() => handleUpdateStatus(appt.id, "Ch·ªù thanh to√°n")}>
                                                ‚úÖ X√°c nh·∫≠n
                                            </button>
                                            <button className={styles.rejectButton} onClick={() => handleUpdateStatus(appt.id, "B·ªã t·ª´ ch·ªëi")}>
                                                ‚ùå T·ª´ ch·ªëi
                                            </button>
                                        </>
                                    )}
                                </td>
                                <td>
                                    {appt.status === "Ch∆∞a b·∫Øt ƒë·∫ßu t∆∞ v·∫•n" ? (
                                        <>
                                            <span>‚è≥ Ch∆∞a b·∫Øt ƒë·∫ßu</span>
                                            <button className={styles.startButton} onClick={() => handleUpdateStatus(appt.id, "ƒêang t∆∞ v·∫•n")}>
                                                üöÄ B·∫Øt ƒë·∫ßu t∆∞ v·∫•n
                                            </button>
                                        </>
                                    ) : appt.status === "ƒêang t∆∞ v·∫•n" ? (
                                        <>
                                            <span>üü¢ ƒêang t∆∞ v·∫•n</span>
                                            <button className={styles.completeButton} onClick={() => handleUpdateStatus(appt.id, "ƒê√£ ho√†n th√†nh")}>
                                                ‚úÖ Ho√†n th√†nh t∆∞ v·∫•n
                                            </button>
                                        </>
                                    ) : (
                                        appt.status
                                    )}
                                </td>
                            </tr>
                        ))}
                    </tbody>
                </table>
            )}
        </div>
    );
};
