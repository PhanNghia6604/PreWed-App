import React, { useEffect, useState } from "react";
import { useLocation, useNavigate } from "react-router-dom";
import ReactPaginate from "react-paginate";
import styles from "./Result.module.css";
import { Link } from "react-router-dom";


// H√†m chuy·ªÉn ƒë·ªïi chuy√™n m√¥n th√†nh d·∫°ng vi·∫øt t·∫Øt
const convertToShortForm = (category) => {
  switch (category) {
    case "T√¢m L√Ω":
      return "TAMLY";
    case "Giao ti·∫øp":
      return "GIAOTIEP";
    case "T√†i ch√≠nh":
      return "TAICHINH";
    case "Gia ƒë√¨nh":
      return "GIADINH";
    case "S·ª©c kh·ªèe":
      return "SUCKHOE";
    case "T√¥n gi√°o":
      return "TONGIAO";
    // Th√™m c√°c chuy√™n m√¥n kh√°c n·∫øu c√≥
    default:
      return category; // Tr·∫£ v·ªÅ nguy√™n g·ªëc n·∫øu kh√¥ng t√¨m th·∫•y
  }
};

const specialtyMap = {
  TAMLY: "T√¢m l√Ω",
  TAICHINH: "T√†i ch√≠nh",
  GIADINH: "Gia ƒë√¨nh",
  SUCKHOE: "S·ª©c kh·ªèe",
  GIAOTIEP: "Giao ti·∫øp",
  TONGIAO: "T√¥n gi√°o",
}
;const getSpecialtyDisplay = (specialty) => {
    // Ki·ªÉm tra n·∫øu chuy√™n gia c√≥ t·∫•t c·∫£ c√°c chuy√™n m√¥n
    if (specialty.length === Object.keys(specialtyMap).length) {
      return ["Chuy√™n gia to√†n di·ªán"];
    } else {
      return specialty.map(code => specialtyMap[code] || code);
    }
  };
const Result = () => {
  const location = useLocation();
  const navigate = useNavigate();
  const testResult = location.state?.testResult;

  // Ch·∫Øc ch·∫Øn r·∫±ng c√≥ d·ªØ li·ªáu tr·∫£ v·ªÅ
  const categoriesToImprove = testResult?.categoriesToImprove || [];
  const reasons = testResult?.reasons || [];
  const consultations = testResult?.consultations || [];
  const diagnosisResult = testResult?.diagnosisResult || "Kh√¥ng c√≥ d·ªØ li·ªáu ch·∫©n ƒëo√°n";

  // Bi·∫øn ƒë·ªÉ ƒëi·ªÅu khi·ªÉn hi·ªáu ·ª©ng hi·ªÉn th·ªã
  const [isVisible, setIsVisible] = useState(false);
  const [recommendedExperts, setRecommendedExperts] = useState([]); // State ƒë·ªÉ l∆∞u chuy√™n gia g·ª£i √Ω
  const [allExperts, setAllExperts] = useState([]); // L∆∞u t·∫•t c·∫£ c√°c chuy√™n gia
  const [loading, setLoading] = useState(false);
    // Ph√¢n trang: S·ªë chuy√™n gia m·ªói trang
    const [currentPage, setCurrentPage] = useState(0);
    const itemsPerPage = 6; // S·ªë chuy√™n gia hi·ªÉn th·ªã tr√™n m·ªói trang
   
    useEffect(() => {
      // ƒê·∫£m b·∫£o khi `currentPage` thay ƒë·ªïi, `displayedExperts` c≈©ng thay ƒë·ªïi
      console.log("Chuy·ªÉn sang trang", currentPage + 1);
    }, [currentPage]); // Ch·∫°y l·∫°i khi `currentPage` thay ƒë·ªïi
    
  useEffect(() => {
    setTimeout(() => setIsVisible(true), 200);

    // G·ªçi API l·∫•y t·∫•t c·∫£ chuy√™n gia khi c√≥ categories c·∫ßn c·∫£i thi·ªán
    if (categoriesToImprove.length > 0) {
      fetchAllExperts(); // L·∫•y t·∫•t c·∫£ chuy√™n gia
    }
  }, [categoriesToImprove]);

  const fetchAllExperts = async () => {
    setLoading(true);
    try {
      const response = await fetch("http://localhost:8080/api/expert/all");  // L·∫•y t·∫•t c·∫£ chuy√™n gia
      const data = await response.json();
      if (response.ok) {
        setAllExperts(data);  // L∆∞u v√†o state
        filterExperts(data, categoriesToImprove);  // L·ªçc chuy√™n gia theo categories
      } else {
        console.error("Error fetching experts:", data);
      }
    } catch (error) {
      console.error("Error:", error);
    } finally {
      setLoading(false);
    }
  };

  const filterExperts = (experts, categories) => {
    // Chuy·ªÉn ƒë·ªïi categoriesToImprove th√†nh d·∫°ng vi·∫øt t·∫Øt
    const convertedCategories = categories.map(convertToShortForm);

    // L·ªçc chuy√™n gia theo chuy√™n m√¥n
    const filteredExperts = experts.filter((expert) =>
      expert.specialty.some((category) => convertedCategories.includes(category))  // So s√°nh sau khi chuy·ªÉn ƒë·ªïi
    );

    setRecommendedExperts(filteredExperts);  // L∆∞u k·∫øt qu·∫£ l·ªçc v√†o state
  };

  const handleViewDetail = (expertId) => {
    navigate(`/expert-profile/${expertId}`); // Navigate ƒë·∫øn trang chi ti·∫øt c·ªßa chuy√™n gia
  };

   // X·ª≠ l√Ω ph√¢n trang
   const handlePageClick = (data) => {
    setCurrentPage(data.selected);
  };

  // Hi·ªÉn th·ªã chuy√™n gia cho trang hi·ªán t·∫°i
  const displayedExperts = recommendedExperts.slice(
    currentPage * itemsPerPage,
    (currentPage + 1) * itemsPerPage
  );

  return (
    <div className={`${styles.container} ${isVisible ? styles.show : ""}`}>
      <h1 className={styles.title}>K·∫øt qu·∫£ B√†i Ki·ªÉm Tra</h1>

      <div className={styles.message}>
        {/* N·∫øu c√≥ c√°c chuy√™n m√¥n c·∫ßn c·∫£i thi·ªán */}
        {categoriesToImprove.length > 0 ? (
          <div className={styles.categories}>
            <h2>C·∫ßn c·∫£i thi·ªán: {categoriesToImprove.join(", ")}</h2>
          </div>
        ) : (
          <h2>Ch√∫c m·ª´ng! Kh√¥ng c√≥ v·∫•n ƒë·ªÅ n√†o ƒë√°ng lo.</h2>
        )}

        {/* Hi·ªÉn th·ªã l√Ω do c·∫ßn c·∫£i thi·ªán */}
        {reasons.length > 0 && (
          <div className={styles.reasons}>
            <h3>L√Ω do:</h3>
            <p>{reasons.join(" ")}</p>
          </div>
        )}

        {/* Hi·ªÉn th·ªã t∆∞ v·∫•n */}
        {consultations.length > 0 && (
          <div className={styles.consultations}>
            <h3>T∆∞ v·∫•n:</h3>
            <p>{consultations.join(" ")}</p>
          </div>
        )}

        {/* Hi·ªÉn th·ªã k·∫øt qu·∫£ ch·∫©n ƒëo√°n */}
        <div className={styles.diagnosisResult}>
          <h3>K·∫øt lu·∫≠n:</h3>
          <p>{diagnosisResult}</p>
        </div>

         {/* Hi·ªÉn th·ªã chuy√™n gia g·ª£i √Ω */}
         <div className={styles.recommendedExperts}>
          <h3>Chuy√™n gia t∆∞ v·∫•n g·ª£i √Ω:</h3>
          {loading ? (
            <p>ƒêang t·∫£i chuy√™n gia...</p>
          ) : displayedExperts.length > 0 ? (
            <div className={styles.expertList}>
              {displayedExperts.map((expert) => (
                <div key={expert.id} className={styles.expertCard}>
                  <img
                    src={expert.avatar}
                    alt={expert.name}
                    className={styles.expertAvatar}
                  />
                  <div>
                    <h4>
                      <Link to={`/expert/${expert.name}`} className={styles.expertLink}>
                        {expert.name}
                      </Link>
                    </h4>
                    <p className={`${styles.specialty} ${expert.specialty.length > 20 ? styles.multiLine : ''}`}>
                      {getSpecialtyDisplay(expert.specialty).join(", ") || "Ch∆∞a c·∫≠p nh·∫≠t"}
                    </p>
                  </div>
                </div>
              ))}
            </div>
          ) : (
            <p>Kh√¥ng c√≥ chuy√™n gia n√†o ph√π h·ª£p v·ªõi c√°c lƒ©nh v·ª±c c·∫ßn c·∫£i thi·ªán c·ªßa b·∫°n.</p>
          )}
        </div>
<ReactPaginate
          previousLabel={"‚Äπ"}
          nextLabel={"‚Ä∫"}
          pageCount={Math.ceil(recommendedExperts.length / itemsPerPage)}
          onPageChange={handlePageClick}
          containerClassName={styles.paginationContainer}
          pageClassName={styles.page}
          previousClassName={styles.previous}
          nextClassName={styles.next}
          activeClassName={styles.active}
        />
      </div>

      <div className={styles.navigationButtons}>
        <button className={styles.expertBtn} onClick={() => navigate("/expert")}>
          üìÖ Ch·ªçn chuy√™n gia t∆∞ v·∫•n
        </button>
        <button className={styles.historyBtn} onClick={() => navigate("/history-test")}>
          üìú Xem l·∫°i l·ªãch s·ª≠ tr·∫Øc nghi·ªám
        </button>
      </div>
    </div>
  );
};

export default Result;
