import React, { useState } from "react";
import { useNavigate } from "react-router-dom";
import styles from "./Test.module.css";

const testQuestions = [
  { id: 1, text: "Khi ƒë·ªëi di·ªán v·ªõi th·ª≠ th√°ch trong cu·ªôc s·ªëng, b·∫°n s·∫Ω l√†m g√¨?", category: "T√¢m l√Ω", options: ["A. T√¥i th∆∞·ªùng t√¨m c√°ch gi·∫£i quy·∫øt v·∫•n ƒë·ªÅ m·ªôt c√°ch nhanh ch√≥ng v√† hi·ªáu qu·∫£, b·∫•t k·ªÉ kh√≥ khƒÉn.", "B. T√¥i s·∫Ω t·ª± h·ªèi b·∫£n th√¢n v√† ng∆∞·ªùi th√¢n xem li·ªáu t√¥i c√≥ th·ªÉ t√¨m gi·∫£i ph√°p h·ª£p l√Ω h∆°n kh√¥ng.", "C. T√¥i s·∫Ω c·ªë g·∫Øng tr√°nh c√°c t√¨nh hu·ªëng kh√≥ khƒÉn v√† t√¨m c√°ch b·∫£o v·ªá b·∫£n th√¢n kh·ªèi cƒÉng th·∫≥ng."] },
  { id: 2, text: "Khi c·∫£m th·∫•y lo l·∫Øng v·ªÅ m·ªôt ƒëi·ªÅu g√¨ ƒë√≥, b·∫°n th∆∞·ªùng ph·∫£n ·ª©ng nh∆∞ th·∫ø n√†o?", category: "T√¢m l√Ω", options: ["A. T√¥i gi·∫£i quy·∫øt ngay b·∫±ng c√°ch t√¨m hi·ªÉu, ph√¢n t√≠ch v·∫•n ƒë·ªÅ v√† l√™n k·∫ø ho·∫°ch h√†nh ƒë·ªông.", "B. T√¥i chia s·∫ª v·ªõi ƒë·ªëi t√°c ho·∫∑c b·∫°n b√® ƒë·ªÉ nh·∫≠n l·ªùi khuy√™n, nh∆∞ng c≈©ng c·∫ßn th·ªùi gian ƒë·ªÉ suy nghƒ© ri√™ng.", "C. T√¥i c·∫£m th·∫•y kh√≥ khƒÉn khi b√†y t·ªè c·∫£m x√∫c v√† th∆∞·ªùng t·ª± m√¨nh gi·∫£i quy·∫øt m·ªçi th·ª©."] },
  { id: 3, text: "B·∫°n nghƒ© sao v·ªÅ vi·ªác l·∫≠p ng√¢n s√°ch t√†i ch√≠nh cho gia ƒë√¨nh?", category: "T√†i ch√≠nh", options: ["A. Ng√¢n s√°ch t√†i ch√≠nh l√† y·∫øu t·ªë quan tr·ªçng trong vi·ªác duy tr√¨ cu·ªôc s·ªëng ·ªïn ƒë·ªãnh, v√† t√¥i s·∫Ω c√πng ƒë·ªëi t√°c l·∫≠p k·∫ø ho·∫°ch chi ti√™u c·∫©n th·∫≠n.", "B. T√¥i nghƒ© ch√∫ng ta c√≥ th·ªÉ l·∫≠p ng√¢n s√°ch, nh∆∞ng ƒë√¥i khi c·∫ßn linh ho·∫°t ƒë·ªÉ ƒë·ªëi ph√≥ v·ªõi nh·ªØng t√¨nh hu·ªëng ph√°t sinh.", "C. T√¥i nghƒ© m·ªói ng∆∞·ªùi n√™n t·ª± ch·ªãu tr√°ch nhi·ªám v·ªÅ t√†i ch√≠nh c·ªßa m√¨nh v√† kh√¥ng c·∫ßn qu√° nhi·ªÅu k·∫ø ho·∫°ch chung."] },
  { id: 4, text: "Khi c√≥ s·ª± kh√°c bi·ªát v·ªÅ c√°ch chi ti√™u gi·ªØa b·∫°n v√† ƒë·ªëi t√°c, b·∫°n s·∫Ω gi·∫£i quy·∫øt nh∆∞ th·∫ø n√†o?", category: "T√†i ch√≠nh", options: ["A. T√¥i s·∫Ω th·∫£o lu·∫≠n ƒë·ªÉ hi·ªÉu r√µ l√Ω do c·ªßa c·∫£ hai b√™n v√† t√¨m ra gi·∫£i ph√°p h·ª£p l√Ω.", "B. T√¥i s·∫Ω gi·∫£i th√≠ch quan ƒëi·ªÉm c·ªßa m√¨nh v√† t√¨m m·ªôt ph∆∞∆°ng √°n h√≤a h·ª£p, nh∆∞ng t√¥i v·∫´n t√¥n tr·ªçng l·ª±a ch·ªçn c·ªßa ƒë·ªëi t√°c.", "C. T√¥i th∆∞·ªùng s·∫Ω nh∆∞·ª£ng b·ªô ho·∫∑c ƒë·ªÉ ƒë·ªëi t√°c quy·∫øt ƒë·ªãnh, mi·ªÖn l√† v·∫•n ƒë·ªÅ kh√¥ng qu√° l·ªõn."] },
  { id: 5, text: "B·∫°n nghƒ© sao v·ªÅ vi·ªác c√≥ con ngay sau khi k·∫øt h√¥n?", category: "Gia ƒë√¨nh", options: ["A. T√¥i mu·ªën c√≥ con ngay khi k·∫øt h√¥n, v√¨ t√¥i nghƒ© ƒë√≥ l√† m·ªôt ph·∫ßn quan tr·ªçng trong vi·ªác x√¢y d·ª±ng gia ƒë√¨nh.", "B. T√¥i nghƒ© ch√∫ng ta n√™n ·ªïn ƒë·ªãnh v·ªÅ t√†i ch√≠nh v√† s·ª± nghi·ªáp tr∆∞·ªõc khi quy·∫øt ƒë·ªãnh c√≥ con.", "C. T√¥i kh√¥ng ch·∫Øc ch·∫Øn v·ªÅ vi·ªác c√≥ con ngay sau khi k·∫øt h√¥n, v√¨ t√¥i c√≤n nhi·ªÅu th·ª© c·∫ßn ho√†n thi·ªán trong cu·ªôc s·ªëng c√° nh√¢n."] },
  { id: 6, text: "B·∫°n nghƒ© g√¨ v·ªÅ vi·ªác s·ªëng g·∫ßn gia ƒë√¨nh hai b√™n sau khi k·∫øt h√¥n?", category: "Gia ƒë√¨nh", options: ["A. T√¥i nghƒ© vi·ªác s·ªëng g·∫ßn gia ƒë√¨nh hai b√™n s·∫Ω gi√∫p ch√∫ng ta duy tr√¨ m·ªëi quan h·ªá t·ªët ƒë·∫πp v√† h·ªó tr·ª£ nhau.", "B. T√¥i nghƒ© ch√∫ng ta n√™n s·ªëng g·∫ßn gia ƒë√¨nh, nh∆∞ng c·∫ßn c√≥ kh√¥ng gian ri√™ng ƒë·ªÉ duy tr√¨ s·ª± ƒë·ªôc l·∫≠p.", "C. T√¥i mu·ªën t·∫°o d·ª±ng m·ªôt kh√¥ng gian ri√™ng bi·ªát v√† kh√¥ng s·ªëng g·∫ßn gia ƒë√¨nh hai b√™n, ƒë·ªÉ tr√°nh nh·ªØng xung ƒë·ªôt kh√¥ng ƒë√°ng c√≥."] },
  { id: 7, text: "B·∫°n c√≥ th√≥i quen duy tr√¨ l·ªëi s·ªëng l√†nh m·∫°nh kh√¥ng?", category: "S·ª©c kh·ªèe", options: ["A. T√¥i t·∫≠p th·ªÉ d·ª•c ƒë·ªÅu ƒë·∫∑n v√† lu√¥n quan t√¢m ƒë·∫øn ch·∫ø ƒë·ªô ƒÉn u·ªëng v√† gi·∫•c ng·ªß ƒë·ªÉ duy tr√¨ s·ª©c kh·ªèe.", "B. T√¥i c·ªë g·∫Øng duy tr√¨ m·ªôt th√≥i quen l√†nh m·∫°nh nh∆∞ng ƒë√¥i khi c√¥ng vi·ªác ho·∫∑c cu·ªôc s·ªëng b·∫≠n r·ªôn khi·∫øn t√¥i thi·∫øu th·ªùi gian.", "C. T√¥i √≠t quan t√¢m ƒë·∫øn vi·ªác duy tr√¨ s·ª©c kh·ªèe v√† th∆∞·ªùng ch·ªâ t·∫≠p th·ªÉ d·ª•c khi c√≥ th·ªùi gian r·∫£nh."] },
  { id: 8, text: "B·∫°n nghƒ© sao v·ªÅ vi·ªác chƒÉm s√≥c s·ª©c kh·ªèe t√¢m l√Ω trong m·ªëi quan h·ªá?", category: "S·ª©c kh·ªèe", options: ["A. T√¥i cho r·∫±ng chƒÉm s√≥c s·ª©c kh·ªèe t√¢m l√Ω r·∫•t quan tr·ªçng trong m·ªëi quan h·ªá, gi√∫p c·∫£ hai hi·ªÉu v√† h·ªó tr·ª£ nhau t·ªët h∆°n.", "B. T√¥i nghƒ© chƒÉm s√≥c s·ª©c kh·ªèe t√¢m l√Ω l√† quan tr·ªçng nh∆∞ng kh√¥ng ph·∫£i l√∫c n√†o c≈©ng c·∫ßn thi·∫øt, t√πy thu·ªôc v√†o t√¨nh hu·ªëng.", "C. T√¥i kh√¥ng nghƒ© vi·ªác chƒÉm s√≥c s·ª©c kh·ªèe t√¢m l√Ω l√† ƒëi·ªÅu quan tr·ªçng trong m·ªëi quan h·ªá c·ªßa ch√∫ng ta."] },
  { id: 9, text: "Khi b·∫°n v√† ƒë·ªëi t√°c c√≥ m√¢u thu·∫´n, b·∫°n s·∫Ω l√†m g√¨?", category: "Giao ti·∫øp", options: ["A. T√¥i s·∫Ω gi·∫£i quy·∫øt ngay l·∫≠p t·ª©c v√† c·ªë g·∫Øng hi·ªÉu quan ƒëi·ªÉm c·ªßa ƒë·ªëi ph∆∞∆°ng.", "B. T√¥i s·∫Ω b√¨nh tƒ©nh l·∫Øng nghe v√† ƒë·ªÉ ƒë·ªëi t√°c chia s·∫ª, sau ƒë√≥ ch√∫ng t√¥i s·∫Ω th·∫£o lu·∫≠n ƒë·ªÉ t√¨m c√°ch gi·∫£i quy·∫øt.", "C. T√¥i th∆∞·ªùng tr√°nh n√≥i v·ªÅ m√¢u thu·∫´n v√† ƒë·ª£i m·ªçi th·ª© t·ª± ·ªïn ƒë·ªãnh."] },
  { id: 10, text: "B·∫°n c·∫£m th·∫•y th·∫ø n√†o khi n√≥i v·ªÅ nh·ªØng v·∫•n ƒë·ªÅ kh√≥ khƒÉn trong m·ªëi quan h·ªá?", category: "Giao ti·∫øp", options: ["A. T√¥i c·∫£m th·∫•y tho·∫£i m√°i khi n√≥i v·ªÅ v·∫•n ƒë·ªÅ kh√≥ khƒÉn v√¨ t√¥i tin r·∫±ng giao ti·∫øp l√† c√°ch gi·∫£i quy·∫øt t·ªët nh·∫•t.", "B. T√¥i s·∫Ω chia s·∫ª khi c·∫£m th·∫•y c·∫ßn thi·∫øt v√† khi t√¥i v√† ƒë·ªëi t√°c c√≥ th·ªÉ c√πng t√¨m ra gi·∫£i ph√°p.", "C. T√¥i c·∫£m th·∫•y kh√≥ khƒÉn khi ph·∫£i m·ªü l√≤ng v√† chia s·∫ª v·ªÅ nh·ªØng v·∫•n ƒë·ªÅ ph·ª©c t·∫°p."] },
  { id: 11, text: "B·∫°n v√† ƒë·ªëi ph∆∞∆°ng c√≥ chia s·∫ª c√πng m·ªôt t√¥n gi√°o kh√¥ng?", category: "T√¥n gi√°o", options: ["A. T√¥i nghƒ© vi·ªác tham gia c√°c ho·∫°t ƒë·ªông t√¥n gi√°o c√πng nhau s·∫Ω tƒÉng c∆∞·ªùng m·ªëi quan h·ªá v√† mang l·∫°i s·ª± g·∫Øn k·∫øt s√¢u s·∫Øc h∆°n.", "B. T√¥i nghƒ© ƒë√¥i khi tham gia c√πng nhau l√† t·ªët, nh∆∞ng ch√∫ng t√¥i c≈©ng c·∫ßn t√¥n tr·ªçng c√°c quan ƒëi·ªÉm c√° nh√¢n c·ªßa nhau.", "C. T√¥i kh√¥ng nghƒ© r·∫±ng tham gia c√°c ho·∫°t ƒë·ªông t√¥n gi√°o l√† c·∫ßn thi·∫øt trong m·ªëi quan h·ªá c·ªßa ch√∫ng t√¥i."] },
  { id: 12, text: "B·∫°n c√≥ s·∫µn s√†ng ch·∫•p nh·∫≠n c√°c kh√°c bi·ªát t√¥n gi√°o trong m·ªëi quan h·ªá kh√¥ng?", category: "T√¥n gi√°o", options: ["A. T√¥i kh√¥ng c√≥ v·∫•n ƒë·ªÅ g√¨ v·ªõi vi·ªác ƒë·ªëi t√°c c√≥ t√¥n gi√°o kh√°c, mi·ªÖn l√† ch√∫ng t√¥i t√¥n tr·ªçng s·ª± kh√°c bi·ªát.", "B. T√¥i c√≥ th·ªÉ t√¨m c√°ch th·ªèa hi·ªáp n·∫øu c√≥ s·ª± kh√°c bi·ªát v·ªÅ t√¥n gi√°o.", "C. T√¥i c·∫£m th·∫•y kh√≥ khƒÉn khi ƒë·ªëi t√°c c√≥ t√¥n gi√°o kh√°c."] }
];

const responseLevels = ["A", "B", "C"];
const questionsPerPage = 4;

const Test = () => {
  const [responses, setResponses] = useState({});
  const [currentPage, setCurrentPage] = useState(0);
  const navigate = useNavigate();

  const totalPages = Math.ceil(testQuestions.length / questionsPerPage);

  const handleResponseChange = (questionId, response) => {
    setResponses((prev) => ({ ...prev, [questionId]: response }));
  };

  const handleNextPage = () => {
    if (currentPage < totalPages - 1) {
      setCurrentPage(currentPage + 1);
    }
  };

  const handlePrevPage = () => {
    if (currentPage > 0) {
      setCurrentPage(currentPage - 1);
    }
  };

  const handleCompletion = async () => {
    const storedUser = localStorage.getItem("user");
    const user = storedUser ? JSON.parse(storedUser) : null;
    const token = user?.token;
    const totalQuestions = testQuestions.length;
    const answeredCount = Object.keys(responses).length;
    if (answeredCount < totalQuestions) {
      alert(`B·∫°n ch∆∞a tr·∫£ l·ªùi h·∫øt c√¢u h·ªèi! (${answeredCount}/${totalQuestions})`);
      return;
    }

    if (!token) {
      alert("B·∫°n ch∆∞a ƒëƒÉng nh·∫≠p, vui l√≤ng ƒëƒÉng nh·∫≠p l·∫°i!");
      navigate("/login");
      return;
    }

    const answers = Object.entries(responses).map(([questionId, answerText]) => {
      const question = testQuestions.find(q => q.id === Number(questionId));
      
      // X√°c ƒë·ªãnh score cho t·ª´ng c√¢u tr·∫£ l·ªùi (gi·∫£ s·ª≠ l√†: A = 3, B = 2, C = 1)
      let score = 0;
      if (answerText.startsWith('A')) {
        score = 3;
      } else if (answerText.startsWith('B')) {
        score = 2;
      } else if (answerText.startsWith('C')) {
        score = 1;
      }
    
      return {
        userId: user.id,
        questionId: Number(questionId),
        score,  // Thay v√¨ answerText, b·∫°n g·ª≠i score
        category: question?.category || "UNKNOWN"
      };
    });
    const requestBody = { userId: user.userId, answers };

    console.log("üì© D·ªØ li·ªáu g·ª≠i l√™n API:", JSON.stringify(requestBody, null, 2));
    try {
      const response = await fetch("/api/test/submit", {
        method: "POST",
        headers: { 
          "Content-Type": "application/json",
          "Authorization": `Bearer ${token}`
        },
        body: JSON.stringify(requestBody),
      });

      if (!response.ok) {
        const errorText = await response.text();
        throw new Error(`L·ªói API ${response.status}: ${errorText}`);
      }

      const result = await response.json();
      console.log("‚úî B√†i ki·ªÉm tra ƒë√£ g·ª≠i th√†nh c√¥ng:", result);
      alert("B√†i ki·ªÉm tra ƒë√£ g·ª≠i th√†nh c√¥ng!");
      navigate("/result", { state: { testResult: result } });

    } catch (error) {
      console.error("üö® L·ªói g·ª≠i b√†i ki·ªÉm tra:", error);
      alert("G·ª≠i b√†i ki·ªÉm tra th·∫•t b·∫°i, vui l√≤ng th·ª≠ l·∫°i!");
    }
  };

  const startIndex = currentPage * questionsPerPage;
  const displayedQuestions = testQuestions.slice(startIndex, startIndex + questionsPerPage);
  

  return (
    <div className={styles.container}>
      <h1 className={styles.title}>B√†i ki·ªÉm tra t∆∞ v·∫•n ti·ªÅn h√¥n nh√¢n</h1>

      <div className={styles.testSection}>
        {displayedQuestions.map((q, index) => (
          <React.Fragment key={q.id}>
            <div className={styles.questionBox}>
              {/* C√¢u h·ªèi in ƒë·∫≠m */}
              <p className={styles.questionText}><strong>{q.text}</strong></p>
              <div className={styles.options}>
                {/* C√°c c√¢u tr·∫£ l·ªùi */}
                {q.options.map((level, i) => (
                  <label key={i} className={styles.option}>
                    <input
                      type="radio"
                      name={`question-${q.id}`}
                      value={level}
                      onChange={() => handleResponseChange(q.id, level)}
                    />
                    {level}
                  </label>
                ))}
              </div>
            </div>
          </React.Fragment>
        ))}

        <div className={styles.navigationButtons}>
          {currentPage > 0 && (
            <button className={styles.navBtn} onClick={handlePrevPage}>
              Quay l·∫°i
            </button>
          )}
          {currentPage < totalPages - 1 ? (
            <button className={styles.navBtn} onClick={handleNextPage}>
              Ti·∫øp theo
            </button>
          ) : (
            <button className={styles.submitBtn} onClick={handleCompletion}>
              K·∫øt th√∫c ki·ªÉm tra
            </button>
          )}
        </div>
      </div>
    </div>
  );
};

export default Test;