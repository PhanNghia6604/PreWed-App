import React, { useState } from "react";
import { useNavigate } from "react-router-dom";
import styles from "./Test.module.css";

const testQuestions = [
  // T√¢m l√Ω
  { id: 1, text: "B·∫°n c·∫£m th·∫•y ·ªïn ƒë·ªãnh v·ªÅ m·∫∑t t√¢m l√Ω trong m·ªëi quan h·ªá kh√¥ng?" },
  { id: 2, text: "B·∫°n c√≥ th·ªÉ chia s·∫ª c·∫£m x√∫c c·ªßa m√¨nh v·ªõi ƒë·ªëi ph∆∞∆°ng d·ªÖ d√†ng kh√¥ng?" },
  // T√†i ch√≠nh
  { id: 3, text: "B·∫°n v√† ƒë·ªëi ph∆∞∆°ng c√≥ chung quan ƒëi·ªÉm v·ªÅ vi·ªác qu·∫£n l√Ω t√†i ch√≠nh kh√¥ng?" },
  { id: 4, text: "B·∫°n c·∫£m th·∫•y tho·∫£i m√°i v·ªõi c√°ch qu·∫£n l√Ω t√†i ch√≠nh trong gia ƒë√¨nh t∆∞∆°ng lai kh√¥ng?" },
  // Gia ƒë√¨nh
  { id: 5, text: "B·∫°n c√≥ th·ªÉ giao ti·∫øp m·ªôt c√°ch hi·ªáu qu·∫£ v·ªõi gia ƒë√¨nh c·ªßa ƒë·ªëi ph∆∞∆°ng kh√¥ng?" },
  { id: 6, text: "B·∫°n c√≥ c·∫£m th·∫•y quan ƒëi·ªÉm v·ªÅ gia ƒë√¨nh c·ªßa m√¨nh v√† ƒë·ªëi ph∆∞∆°ng kh√¥ng ph√π h·ª£p trong m·ªôt s·ªë t√¨nh hu·ªëng?" },
  // S·ª©c kh·ªèe
  { id: 7, text: "B·∫°n v√† ƒë·ªëi ph∆∞∆°ng c√≥ th√≥i quen chƒÉm s√≥c s·ª©c kh·ªèe gi·ªëng nhau kh√¥ng?" },
  { id: 8, text: "B·∫°n c√≥ tin r·∫±ng vi·ªác chƒÉm s√≥c s·ª©c kh·ªèe chung s·∫Ω gi√∫p duy tr√¨ m·ªôt m·ªëi quan h·ªá l√¢u d√†i?" },
  // Giao ti·∫øp
  { id: 9, text: "B·∫°n c·∫£m th·∫•y d·ªÖ d√†ng trong vi·ªác giao ti·∫øp v·ªÅ c√°c v·∫•n ƒë·ªÅ quan tr·ªçng trong m·ªëi quan h·ªá?" },
  { id: 10, text: "B·∫°n c√≥ th·ªÉ th·∫£o lu·∫≠n v·ªÅ c√°c ch·ªß ƒë·ªÅ nh·∫°y c·∫£m m√† kh√¥ng c·∫£m th·∫•y lo l·∫Øng?" },
  // T√¥n gi√°o
  { id: 11, text: "B·∫°n v√† ƒë·ªëi ph∆∞∆°ng c√≥ chia s·∫ª c√πng m·ªôt t√¥n gi√°o kh√¥ng?" },
  { id: 12, text: "B·∫°n c√≥ s·∫µn s√†ng ch·∫•p nh·∫≠n c√°c kh√°c bi·ªát t√¥n gi√°o trong m·ªëi quan h·ªá kh√¥ng?" }
];

const responseLevels = ["Kh√¥ng ·ªïn", "R·∫•t ·ªïn"];
const questionsPerPage = 4;

const Test = () => {
  const [responses, setResponses] = useState({});
  const [currentPage, setCurrentPage] = useState(0);
  const navigate = useNavigate();

  const totalPages = Math.ceil(testQuestions.length / questionsPerPage);

  const handleResponseChange = (questionId, response) => {
    setResponses((prev) => ({ ...prev, [questionId]: response }));
  };

  const handleNextPage = () => {
    if (currentPage < totalPages - 1) {
      setCurrentPage(currentPage + 1);
    }
  };

  const handlePrevPage = () => {
    if (currentPage > 0) {
      setCurrentPage(currentPage - 1);
    }
  };
  const categoryMap = {
    "T√¢m l√Ω": "TAMLY",
    "T√†i ch√≠nh": "TAICHINH",
    "Gia ƒë√¨nh": "GIADINH",
    "S·ª©c kh·ªèe": "SUCKHOE",
    "Giao ti·∫øp": "GIAOTIEP",
    "T√¥n gi√°o": "TONGIAO"
  };
  

  const handleCompletion = async () => {
    const storedUser = localStorage.getItem("user");
    const user = storedUser ? JSON.parse(storedUser) : null;
    const token = user?.token;
  
    if (!token) {
      alert("B·∫°n ch∆∞a ƒëƒÉng nh·∫≠p, vui l√≤ng ƒëƒÉng nh·∫≠p l·∫°i!");
      navigate("/login");
      return;
    }
  
    const answers = Object.entries(responses).map(([questionId, answerText]) => {
      const category = getCategory(Number(questionId));
      return {
        userId: user.id,
        questionId: Number(questionId),
        answerText,
        category: categoryMap[category] || "UNKNOWN"
      };
    });
  
    try {
      const response = await fetch("/api/test/submit", {
        method: "POST",
        headers: { 
          "Content-Type": "application/json",
          "Authorization": `Bearer ${token}`
        },
        body: JSON.stringify({ userId: user.id, answers }),
      });
  
      if (!response.ok) {
        const errorText = await response.text();
        throw new Error(`L·ªói API ${response.status}: ${errorText}`);
      }
  
      const result = await response.json();
      console.log("‚úî B√†i ki·ªÉm tra ƒë√£ g·ª≠i th√†nh c√¥ng:", result);
      alert("B√†i ki·ªÉm tra ƒë√£ g·ª≠i th√†nh c√¥ng!");
      navigate("/result", { state: { testResult: result } });

    } catch (error) {
      console.error("üö® L·ªói g·ª≠i b√†i ki·ªÉm tra:", error);
      alert("G·ª≠i b√†i ki·ªÉm tra th·∫•t b·∫°i, vui l√≤ng th·ª≠ l·∫°i!");
    }
  };
  
  
  
  // H√†m x√°c ƒë·ªãnh danh m·ª•c (category) t·ª´ questionId
  const getCategory = (questionId) => {
    if (questionId <= 2) return "T√¢m l√Ω";
    if (questionId <= 4) return "T√†i ch√≠nh";
    if (questionId <= 6) return "Gia ƒë√¨nh";
    if (questionId <= 8) return "S·ª©c kh·ªèe";
    if (questionId <= 10) return "Giao ti·∫øp";
    return "T√¥n gi√°o";
  };
  

  const startIndex = currentPage * questionsPerPage;
  const displayedQuestions = testQuestions.slice(startIndex, startIndex + questionsPerPage);

  return (
    <div className={styles.container}>
      <h1 className={styles.title}>B√†i ki·ªÉm tra t∆∞ v·∫•n ti·ªÅn h√¥n nh√¢n</h1>
      <div className={styles.testSection}>
        {displayedQuestions.map((q) => (
          <div key={q.id} className={styles.questionBox}>
            <p className={styles.questionText}>{q.text}</p>
            <div className={styles.options}>
              {responseLevels.map((level) => (
                <label key={level} className={styles.option}>
                  <input
                    type="radio"
                    name={`question-${q.id}`}
                    value={level}
                    onChange={() => handleResponseChange(q.id, level)}
                  />
                  {level}
                </label>
              ))}
            </div>
          </div>
        ))}
        <div className={styles.navigationButtons}>
          {currentPage > 0 && (
            <button className={styles.navBtn} onClick={handlePrevPage}>
              Quay l·∫°i
            </button>
          )}
          {currentPage < totalPages - 1 ? (
            <button className={styles.navBtn} onClick={handleNextPage}>
              Ti·∫øp theo
            </button>
          ) : (
            <button className={styles.submitBtn} onClick={handleCompletion}>
              K·∫øt th√∫c ki·ªÉm tra
            </button>
          )}
        </div>
      </div>
    </div>
  );
};

export default Test;
