import React, { useEffect, useState } from "react";
import { useParams, useNavigate } from "react-router-dom";
import { servicePackages } from "../../fake data/data"; // Import danh s√°ch chuy√™n gia
import style from "./BookingPayment.module.css";

export const BookingPayment = () => {
  const { expertId, date, calculatedEndDate, sessionCount } = useParams();
  console.log("Received endDate from URL:", calculatedEndDate);
  console.log("Received sessionCount from URL:", sessionCount);
  const navigate = useNavigate();
  const [booking, setBooking] = useState(null);
  const [user, setUser] = useState(null);
  const [paymentMethod, setPaymentMethod] = useState("");
  const [totalAmount, setTotalAmount] = useState(0);

  useEffect(() => {
    const storedUser = JSON.parse(localStorage.getItem("user")) || null;
    setUser(storedUser);
  
    if (storedUser) {
      const userBookings = JSON.parse(localStorage.getItem(`bookings_${storedUser.id}`)) || [];
  
      // T√¨m l·ªãch ƒë·∫∑t c·ªßa ng∆∞·ªùi d√πng
      const foundBooking = userBookings.find(
        (b) => Number(b.expertId) === Number(expertId) && b.date === date && b.endDate === calculatedEndDate
      );
  
      if (foundBooking) {
        setBooking(foundBooking);
  
        // L·∫•y gi√° c·ªßa g√≥i d·ªãch v·ª•
        const selectedPackage = servicePackages.find(pkg => pkg.name === foundBooking.packageName);
        const packagePrice = selectedPackage ? selectedPackage.price : 0;
        
        console.log("Selected Package:", selectedPackage);
        console.log("Final Price:", packagePrice);
        
        setTotalAmount(packagePrice); // Kh√¥ng nh√¢n v·ªõi sessionNum
        
      }
    }
  }, [expertId, date, calculatedEndDate, sessionCount]);
  const handlePayment = () => {
    if (!paymentMethod) {
      alert("Vui l√≤ng ch·ªçn ph∆∞∆°ng th·ª©c thanh to√°n!");
      return;
    }

    if (!booking) {
      alert("Kh√¥ng t√¨m th·∫•y l·ªãch ƒë·∫∑t.");
      return;
    }

    if (booking.status !== "Ch·ªù thanh to√°n" && booking.status !== "Ch·ªù ch·∫•p nh·∫≠n") {
      alert("L·ªãch h·∫πn ch∆∞a ƒë∆∞·ª£c chuy√™n gia ch·∫•p nh·∫≠n ho·∫∑c ƒë√£ thanh to√°n.");
      return;
    }

    const updatedBookings = JSON.parse(localStorage.getItem(`bookings_${user.id}`)) || [];
    const newBookings = updatedBookings.map((b) =>
      Number(b.expertId) === Number(booking.expertId) && b.date === booking.date && b.endDate === booking.endDate
        ? { ...b, status: "ƒê√£ thanh to√°n", amountPaid: totalAmount }
        : b
    );

    localStorage.setItem(`bookings_${user.id}`, JSON.stringify(newBookings));

    alert(`Thanh to√°n th√†nh c√¥ng ${totalAmount.toLocaleString()} VNƒê b·∫±ng ${paymentMethod}!`);
    navigate("/my-booking");
  };

  if (!user) {
    return <div className={style.notFound}>B·∫°n ch∆∞a ƒëƒÉng nh·∫≠p!</div>;
  }

  if (!booking) {
    return <div className={style.notFound}>L·ªãch ƒë·∫∑t kh√¥ng t·ªìn t·∫°i!</div>;
  }

  return (
    <div className={style.container}>
      <h2>Thanh to√°n l·ªãch h·∫πn</h2>
      <div className={style.bookingInfo}>
        <p><strong>Chuy√™n gia:</strong> {booking.expertName}</p>
        <p><strong>Ng√†y:</strong> {booking.date}</p>
        <p><strong>Ng√†y k·∫øt th√∫c:</strong> {booking.endDate}</p>
        <p><strong>S·ªë bu·ªïi:</strong> {sessionCount}</p>
        <p><strong>Tr·∫°ng th√°i:</strong> {booking.status || "Ch∆∞a thanh to√°n"}</p>
        <p className={style.totalAmount}>
          <strong>T·ªïng ti·ªÅn:</strong> {totalAmount.toLocaleString()} VNƒê
        </p>
      </div>

      <h3>Ch·ªçn ph∆∞∆°ng th·ª©c thanh to√°n:</h3>
      <div className={style.paymentOptions}>
        <label>
          <input
            type="radio"
            value="Th·∫ª t√≠n d·ª•ng"
            checked={paymentMethod === "Th·∫ª t√≠n d·ª•ng"}
            onChange={(e) => setPaymentMethod(e.target.value)}
          />
          üí≥ Th·∫ª t√≠n d·ª•ng / Ghi n·ª£
        </label>
        <label>
          <input
            type="radio"
            value="MoMo"
            checked={paymentMethod === "MoMo"}
            onChange={(e) => setPaymentMethod(e.target.value)}
          />
          üì± V√≠ MoMo
        </label>
        <label>
          <input
            type="radio"
            value="Chuy·ªÉn kho·∫£n ng√¢n h√†ng"
            checked={paymentMethod === "Chuy·ªÉn kho·∫£n ng√¢n h√†ng"}
            onChange={(e) => setPaymentMethod(e.target.value)}
          />
          üè¶ Chuy·ªÉn kho·∫£n ng√¢n h√†ng
        </label>
      </div>

      <button className={style.payButton} onClick={handlePayment}>
        X√°c nh·∫≠n & Thanh to√°n
      </button>
    </div>
  );
};
