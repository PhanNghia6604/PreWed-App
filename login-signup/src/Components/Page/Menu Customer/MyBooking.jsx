import React, { useEffect, useState } from "react";
import { useNavigate } from "react-router-dom";
import style from "./MyBookings.module.css";

export const MyBookings = () => {
  const [bookings, setBookings] = useState([]);
  const [filteredBookings, setFilteredBookings] = useState([]); // üîπ L·ªçc theo tr·∫°ng th√°i
  const [statusFilter, setStatusFilter] = useState(""); // üîπ Tr·∫°ng th√°i filter
  const [currentPage, setCurrentPage] = useState(1); // üîπ Ph√¢n trang
  const itemsPerPage = 5; // üîπ S·ªë l∆∞·ª£ng l·ªãch h·∫πn m·ªói trang
  const navigate = useNavigate();
  useEffect(() => {
    const storedUser = localStorage.getItem("user");
    const userId = storedUser ? JSON.parse(storedUser).userId : null;
    // const token = localStorage.getItem("token"); 

    if (!userId) {
      console.error("‚ùå Kh√¥ng t√¨m th·∫•y userId trong localStorage!");
      return;
    }
    console.log("‚úÖ User ID hi·ªán t·∫°i:", userId);




    fetch("/api/booking", {
      headers: { "Authorization": `Bearer ${localStorage.getItem("token")}` },
    })
      .then((response) => response.json())
      .then((data) => {
        console.log("üìå D·ªØ li·ªáu API tr·∫£ v·ªÅ:", data);

        if (!Array.isArray(data)) {
          console.error("‚ùå API kh√¥ng tr·∫£ v·ªÅ m·∫£ng d·ªØ li·ªáu h·ª£p l·ªá!", data);
          return;
        }

        console.log("‚úÖ User ID hi·ªán t·∫°i:", userId);

        // üîπ Ki·ªÉm tra t·ª´ng ph·∫ßn t·ª≠ tr∆∞·ªõc khi l·ªçc
        data.forEach((booking, index) => {
          console.log(`üìå Booking ${index}:`, booking);
        });

        // üîπ L·ªçc danh s√°ch ch·ªâ l·∫•y c·ªßa user hi·ªán t·∫°i
        const filteredData = data.filter(
          (booking) => booking?.user?.id === userId
        );

        console.log("‚úÖ Danh s√°ch booking c·ªßa user hi·ªán t·∫°i:", filteredData);

        setBookings(filteredData);
        setFilteredBookings(sortBookings(filteredData));
      })
      .catch((error) => console.error("‚ùå L·ªói l·∫•y danh s√°ch l·ªãch h·∫πn:", error));

  }, []);



  // L·ªçc theo tr·∫°ng th√°i
  useEffect(() => {
    const filtered = statusFilter
      ? bookings.filter((b) => b.status === statusFilter)
      : bookings;
    setFilteredBookings(sortBookings(filtered)); // üîπ C·∫≠p nh·∫≠t danh s√°ch ƒë√£ l·ªçc
    setCurrentPage(1); // üîπ Reset trang v·ªÅ ƒë·∫ßu khi thay ƒë·ªïi filter
  }, [statusFilter, bookings]);

  // üîπ H√†m s·∫Øp x·∫øp: ƒê∆∞a `CANCELLED` v√† `FINISHED` xu·ªëng cu·ªëi
  const sortBookings = (list) => {
    return [...list].sort((a, b) => {
      const order = {
        PENDING: 0,
        PENDING_PAYMENT: 1,
        PROCESSING: 2,
        FINISHED: 3,
        CANCELLED: 4
      };

      // S·∫Øp x·∫øp theo tr·∫°ng th√°i ∆∞u ti√™n
      const statusOrder = order[a.status] - order[b.status];

      // N·∫øu tr·∫°ng th√°i gi·ªëng nhau, ∆∞u ti√™n l·ªãch s·ªõm h∆°n
      if (statusOrder === 0) {
        const dateA = new Date(a.appointmentDate).getTime();
        const dateB = new Date(b.appointmentDate).getTime();

        if (dateA !== dateB) {
          return dateA - dateB; // S·ªõm h∆°n l√™n tr∆∞·ªõc
        }
      }

      // N·∫øu c√πng tr·∫°ng th√°i v√† c√πng ng√†y, ∆∞u ti√™n ID m·ªõi nh·∫•t
      return b.id - a.id;
    });
  };


  // X·ª≠ l√Ω h·ªßy l·ªãch h·∫πn
  const handleCancelBooking = (id) => {
    if (!window.confirm("B·∫°n c√≥ ch·∫Øc mu·ªën h·ªßy l·ªãch h·∫πn n√†y kh√¥ng?")) return;

    fetch(`/api/booking/${id}?status=CANCELLED`, {
      method: "PATCH",
      headers: {
        "Authorization": `Bearer ${localStorage.getItem("token")}`,
      },
    })
      .then((response) => response.json())
      .then(() => {
        setBookings((prev) =>
          prev.map((b) => (b.id === id ? { ...b, status: "CANCELLED" } : b))
        );
      })
      .catch((error) => console.error("L·ªói h·ªßy l·ªãch:", error));
  };
  const updateBookingStatus = async (bookingId, newStatus) => {
    try {
      const token = localStorage.getItem("token");
      if (!token) {
        alert("Phi√™n ƒëƒÉng nh·∫≠p ƒë√£ h·∫øt h·∫°n!");
        return;
      }
  
      const response = await fetch(`/api/booking/${bookingId}`, {
        method: "PATCH",
        headers: {
          "Content-Type": "application/json",
          Authorization: `Bearer ${token}`,
        },
        body: JSON.stringify({ status: newStatus }),
      });
  
      if (!response.ok) {
        const errorMessage = await response.text();
        throw new Error(`C·∫≠p nh·∫≠t tr·∫°ng th√°i th·∫•t b·∫°i: ${errorMessage}`);
      }
  
      const updatedBooking = await response.json();
      console.log("‚úÖ C·∫≠p nh·∫≠t booking th√†nh c√¥ng:", updatedBooking);
  
      setBookings((prev) =>
        prev.map((b) => (b.id === bookingId ? updatedBooking : b))
      );
    } catch (error) {
      console.error("‚ùå L·ªói c·∫≠p nh·∫≠t:", error);
    }
  };
  
  const handlePayment = async (bookingId) => {
    try {
      localStorage.setItem("bookingId", bookingId);
      const token = localStorage.getItem("token");
  
      // First update status to PENDING_PAYMENT
      await updateBookingStatus(bookingId, "PENDING_PAYMENT");
  
      // Then create payment request
      const response = await fetch("/api/payments", {
        method: "POST",
        headers: {
          "Content-Type": "application/json",
          Authorization: `Bearer ${token}`,
        },
        body: JSON.stringify({ bookingId }),
      });
  
      if (!response.ok) throw new Error("L·ªói t·∫°o y√™u c·∫ßu thanh to√°n!");
  
      const paymentUrl = await response.text();
      window.location.href = paymentUrl;
    } catch (error) {
      console.error("L·ªói thanh to√°n:", error);
      alert("Kh√¥ng th·ªÉ t·∫°o y√™u c·∫ßu thanh to√°n, vui l√≤ng th·ª≠ l·∫°i!");
    }
  };
  
  useEffect(() => {
    const checkPaymentStatus = async () => {
      try {
        const bookingId = localStorage.getItem("bookingId");
        if (!bookingId) return;
  
        const token = localStorage.getItem("token");
        if (!token) {
          alert("Phi√™n ƒëƒÉng nh·∫≠p h·∫øt h·∫°n, vui l√≤ng ƒëƒÉng nh·∫≠p l·∫°i!");
          return;
        }
  
        // Get all bookings
        const response = await fetch(`/api/booking`, {
          method: "GET",
          headers: {
            "Content-Type": "application/json",
            Authorization: `Bearer ${token}`,
          },
        });
  
        if (!response.ok) {
          if (response.status === 401) {
            alert("Phi√™n ƒëƒÉng nh·∫≠p ƒë√£ h·∫øt h·∫°n. Vui l√≤ng ƒëƒÉng nh·∫≠p l·∫°i!");
            return;
          }
          throw new Error(`L·ªói API: ${await response.text()}`);
        }
  
        const allBookings = await response.json();
        
        // Find the specific booking we're interested in
        const currentBooking = allBookings.find(b => b.id === parseInt(bookingId));
        
        if (!currentBooking) {
          console.warn("Kh√¥ng t√¨m th·∫•y booking v·ªõi ID:", bookingId);
          return;
        }
  
        if (currentBooking.status === "AWAIT") {
          console.log("üí∞ Expert Payment:", currentBooking.expertPayment);
          alert(`Thanh to√°n th√†nh c√¥ng! S·ªë ti·ªÅn chuy√™n gia nh·∫≠n: ${currentBooking.expertPayment}`);
          clearInterval(intervalId);
          localStorage.removeItem("bookingId"); // Clean up
        }
        
        // Don't automatically update to AWAIT - let the backend handle this
      } catch (error) {
        console.error("‚ùå L·ªói ki·ªÉm tra tr·∫°ng th√°i thanh to√°n:", error);
      }
    };
  
    const intervalId = setInterval(checkPaymentStatus, 5000);
    return () => clearInterval(intervalId);
  }, []);
  

  // key reviewedBookings ƒë∆∞·ª£c l∆∞u v√†o localStorage ƒë·ªÉ d√πng ƒë√≥ng form ƒë√°nh gi√°
  const [reviewedBookings, setReviewedBookings] = useState(() => {
    return JSON.parse(localStorage.getItem("reviewedBookings")) || {};
  });

  useEffect(() => {
    const storedReviews = JSON.parse(localStorage.getItem("reviewedBookings")) || {};
    setReviewedBookings(storedReviews);
  }, []);
 
  

  // Ph√¢n trang
  const indexOfLastItem = currentPage * itemsPerPage;
  const indexOfFirstItem = indexOfLastItem - itemsPerPage;
  const currentBookings = filteredBookings.slice(indexOfFirstItem, indexOfLastItem);

  const totalPages = Math.ceil(filteredBookings.length / itemsPerPage);
  const goToPage = (page) => {
    if (page >= 1 && page <= totalPages) {
      setCurrentPage(page);
    }
  };

  return (
    <div className={style.container}>
      <h2>L·ªãch ƒë·∫∑t c·ªßa t√¥i</h2>

      {/* üîπ B·ªô l·ªçc tr·∫°ng th√°i */}
      <div className={style.filterContainer}>
        <label htmlFor="statusFilter">L·ªçc theo tr·∫°ng th√°i:</label>
        <select
          id="statusFilter"
          value={statusFilter}
          onChange={(e) => setStatusFilter(e.target.value)}
          className={style.filterSelect}
        >
          <option value="">T·∫•t c·∫£</option>
          <option value="PENDING">Ch·ªù x√°c nh·∫≠n</option>
          <option value="PENDING_PAYMENT">Ch·ªù thanh to√°n</option>
          <option value="AWAIT">Ch·ªù t∆∞ v·∫•n</option>
          <option value="PROCESSING">ƒêang t∆∞ v·∫•n</option>
          <option value="FINISHED">Ho√†n th√†nh</option>
          <option value="CANCELLED">ƒê√£ h·ªßy</option>
        </select>
      </div>

      {currentBookings.length === 0 ? (
        <p>Kh√¥ng c√≥ l·ªãch h·∫πn ph√π h·ª£p.</p>
      ) : (
        <table className={style.bookingTable}>
          <thead>
            <tr>
              <th>Chuy√™n gia</th>
              <th>Ng√†y</th>
              <th>Gi·ªù</th>
              <th>D·ªãch v·ª•</th>
              <th>Gi√° ti·ªÅn</th>
              <th>Tr·∫°ng th√°i</th>
              <th>H√†nh ƒë·ªông</th>
            </tr>
          </thead>
          <tbody>
            {currentBookings.map((b) => {
              const expert = b.slotExpert.expert;
              const meetLink = localStorage.getItem(`meetLink-${b.id}`);
              return (
                <tr key={b.id}>
                  <td className={style.expertColumn}>
                    <img
                      src={expert.avatar && expert.avatar.includes("/") ? expert.avatar : `/images/experts/${expert.avatar}`}
                      alt={expert.name}
                      className={style.expertAvatar}
                      onError={(e) => (e.target.src = "/images/experts/default-avatar.png")}
                    />
                    <span>{expert.name}</span>
                  </td>

                  <td>{b.slotExpert.date}</td>
                  <td>{b.slotExpert.slot.startTime} - {b.slotExpert.slot.endTime}</td>
                  <td>
                    {b.services.length > 0 ? b.services[0].name : 'Kh√¥ng c√≥'}
                  </td>
                  <td>
                    {b.services.length > 0 ? `${b.services[0].price.toLocaleString()} VND` : 'Kh√¥ng c√≥'}
                  </td>
                  <td><strong>{b.status}</strong></td>
                  <td>
                    {b.status === "PENDING" && <p className={style.pendingText}>‚è≥ ƒêang ch·ªù chuy√™n gia x√°c nh·∫≠n...</p>}
                    {b.status === "PENDING_PAYMENT" && (
                      <button className={style.payButton} onClick={() => handlePayment(b.id)}>
                        üí≥ Thanh to√°n
                      </button>
                    )}
                    {b.status === "AWAIT" && (
                      <div className={style.awaitContainer}>
                        <p className={style.awaitText}>‚è≥ B·∫°n ƒë√£ thanh to√°n. Vui l√≤ng ƒë·ª£i ƒë·∫øn gi·ªù t∆∞ v·∫•n!</p>
                        <button className={style.rescheduleButton} onClick={() => navigate(`/reschedule/${b.id}`)}>
                          üîÑ Thay ƒë·ªïi l·ªãch
                        </button>
                      </div>
                    )}
                    {b.status === "PROCESSING" && meetLink && (
                      <p>üîó <a href={meetLink.startsWith("http") ? meetLink : `https://${meetLink}`}
                        target="_blank"
                        rel="noopener noreferrer"
                        className={style.link}>
                        Link t∆∞ v·∫•n
                      </a>
                      </p>
                    )}
                    {b.status === "FINISHED" && (
                      reviewedBookings[b.id] ? (
                        <p className={style.reviewedText}>‚úÖ ƒê√£ ƒë√°nh gi√°</p>
                      ) : (
                        <button
                          className={style.feedbackButton}
                          onClick={() => navigate(`/feedback/${b.id}/${expert.id}`)}
                        >
                          ‚ú© ƒê√°nh gi√° chuy√™n gia
                        </button>
                      )
                    )}
                    {b.status === "CANCELLED" && <p className={style.cancelledText}>‚ùå L·ªãch h·∫πn ƒë√£ b·ªã h·ªßy.</p>}
                    {["PENDING", "PENDING_PAYMENT"].includes(b.status) && (
                      <button className={style.cancelButton} onClick={() => handleCancelBooking(b.id)}>
                        ‚ùå H·ªßy l·ªãch
                      </button>
                    )}
                  </td>
                </tr>
              );
            })}
          </tbody>
        </table>
      )}

      {/* üîπ Ph√¢n trang */}
      {totalPages > 1 && (
        <div className={style.pagination}>
          <button onClick={() => goToPage(currentPage - 1)} disabled={currentPage === 1}>
            ‚óÄ Tr∆∞·ªõc
          </button>
          <span>Trang {currentPage} / {totalPages}</span>
          <button onClick={() => goToPage(currentPage + 1)} disabled={currentPage === totalPages}>
            Sau ‚ñ∂
          </button>
        </div>
      )}
    </div>
  );

}