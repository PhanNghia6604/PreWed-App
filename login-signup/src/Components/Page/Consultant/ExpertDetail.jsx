import { useParams } from "react-router-dom";
import { useContext, useState, useEffect } from "react";
import { ExpertContext } from "./ExpertContext";
import expertDescriptions from "../Consultant/ExpertDescription";
import { useNavigate } from "react-router-dom";

import styles from "./ExpertDetail.module.css";

const getRandomExperience = () => Math.floor(Math.random() * 10) + 1;
const specialtyMap = {
  TAMLY: "T√¢m l√Ω",
  TAICHINH: "T√†i ch√≠nh",
  GIADINH: "Gia ƒë√¨nh",
  SUCKHOE: "S·ª©c kh·ªèe",
  GIAOTIEP: "Giao ti·∫øp",
  TONGIAO: "T√¥n gi√°o",
}
const ExpertDetail = () => {
  const { name } = useParams();
  
  const [experts, setExperts] = useState([]);
  const [experience, setExperience] = useState(null);
  const [servicePackages, setServicePackages] = useState([]);
  const [availableSlots, setAvailableSlots] = useState([]);
  const [isModalOpen, setIsModalOpen] = useState(false);
  const [selectedPackage, setSelectedPackage] = useState(null);
  const [selectedSlot, setSelectedSlot] = useState(null);
  const [isBooking, setIsBooking] = useState(false);
  const [message, setMessage] = useState("");
  const [rating, setRating] = useState(null);
  const [currentPage, setCurrentPage] = useState(1);
const [reviewsPerPage] = useState(3); // S·ªë l∆∞·ª£ng ƒë√°nh gi√° hi·ªÉn th·ªã tr√™n m·ªói trang

 
  const [reviews, setReviews] = useState([]);

  const paginate = (pageNumber) => setCurrentPage(pageNumber);


const nextPage = () => {
  if (currentPage < Math.ceil(reviews.length / reviewsPerPage)) {
    setCurrentPage(currentPage + 1);
  }
};

const prevPage = () => {
  if (currentPage > 1) {
    setCurrentPage(currentPage - 1);
  }
};
const indexOfLastReview = currentPage * reviewsPerPage;
const indexOfFirstReview = indexOfLastReview - reviewsPerPage;
const currentReviews = reviews.slice(indexOfFirstReview, indexOfLastReview);
  
  const navigate = useNavigate();
  const handleGoBack = () => {
    navigate("/expert"); // ƒê∆∞·ªùng d·∫´n t·ªõi trang danh s√°ch chuy√™n gia
  };

  useEffect(() => {
    const fetchReviews = async () => {
      const token = localStorage.getItem("token");
  
      try {
        const expert = experts.find((e) => e.name === decodeURIComponent(name));
        if (!expert) return;
  
        // G·ªçi API ƒë·ªÉ l·∫•y t·∫•t c·∫£ feedback
        const response = await fetch(`/api/feedback`, {
          method: "GET",
          headers: {
            // "Authorization": `Bearer ${token}`,
          },
        });
  
        if (!response.ok) throw new Error("Kh√¥ng th·ªÉ l·∫•y b√¨nh lu·∫≠n");
  
        const data = await response.json();
        console.log("üìå B√¨nh lu·∫≠n chuy√™n gia:", data);
  
        // L·ªçc feedback ch·ªâ l·∫•y nh·ªØng feedback c√≥ expert.id tr√πng v·ªõi ID c·ªßa chuy√™n gia hi·ªán t·∫°i
        const filteredReviews = data.filter((review) => review.expert.id === expert.id);
        setReviews(filteredReviews);
      } catch (error) {
        console.error("‚ùå L·ªói khi t·∫£i b√¨nh lu·∫≠n:", error);
      }
    };
  
    fetchReviews();
  }, [experts, name]);
  


  
  useEffect(() => {
    const fetchExperts = async () => {
      try {
        const response = await fetch("/api/get");
        if (!response.ok) throw new Error("L·ªói khi t·∫£i danh s√°ch chuy√™n gia");
        
        const data = await response.json();
        console.log("üìå D·ªØ li·ªáu chuy√™n gia t·ª´ API:", data);
  
        // L·ªçc ch·ªâ l·∫•y c√°c chuy√™n gia c√≥ roleEnum l√† "EXPERT"
        const expertList = data.filter((user) => user.roleEnum === "EXPERT");
        setExperts(expertList);
      } catch (error) {
        console.error("‚ùå L·ªói khi t·∫£i danh s√°ch chuy√™n gia:", error);
      }
    };
  
    fetchExperts();
  }, []);
  useEffect(() => {
    const expert = experts.find((e) => e.name === decodeURIComponent(name));
    if (expert) {
      const experienceKey = `experience_${expert.id}`;
      const storedExperience = localStorage.getItem(experienceKey);
  
      if (storedExperience !== null) {
        setExperience(parseInt(storedExperience, 10)); // D√πng gi√° tr·ªã ƒë√£ l∆∞u
      } else {
        const newExperience = getRandomExperience();
        localStorage.setItem(experienceKey, newExperience); // L∆∞u v√†o localStorage
        setExperience(newExperience);
      }
    }
  }, [experts, name]);
  
  const fetchServicePackages = async () => {
    const token = localStorage.getItem("token"); 
    try {
      const response = await fetch("/api/servicepackage",   {
        method: "Get",
        headers:{
          "Authorization": `Bearer ${token}`, // G·ª≠i token trong headers
        }
      });
      
      if (!response.ok) throw new Error("L·ªói khi t·∫£i g√≥i t∆∞ v·∫•n");
      const data = await response.json();
      setServicePackages(data);
      setIsModalOpen(true);
    } catch (error) {
      console.error(error);
    }
  };

 const fetchAvailableSlots = async () => {
    try {
        const token = localStorage.getItem("token");
        const response = await fetch("/api/slots", {
            method: "GET",
            headers: { "Authorization": `Bearer ${token}` },
        });

        console.log("üìå API Response:", response);

        if (!response.ok) {
            // Th·ª≠ l·∫•y ph·∫£n h·ªìi d·∫°ng text v√¨ kh√¥ng ph·∫£i JSON
            const errorText = await response.text();
            console.log("üì® Ph·∫£n h·ªìi t·ª´ server (raw text):", errorText);

            if (errorText.includes("Selected staff is not available for the chosen slot")) {
                throw new Error("Slot n√†y ƒë√£ c√≥ ng∆∞·ªùi ƒë·∫∑t, vui l√≤ng ch·ªçn slot kh√°c!");
            } else {
                throw new Error(`L·ªói API: ${response.status} - ${errorText}`);
            }
        }

        const data = await response.json();
        console.log("üìå L·ªãch tr·ªëng nh·∫≠n ƒë∆∞·ª£c:", data);

        if (data.length === 0) {
            throw new Error("Kh√¥ng c√≥ l·ªãch tr·ªëng n√†o!");
        }

        setAvailableSlots(data);
    } catch (error) {
        console.error("‚ùå L·ªói khi t·∫£i l·ªãch tr·ªëng:", error);
        alert(error.message); // Hi·ªÉn th·ªã l·ªói tr√™n giao di·ªán
    }
};




  
  

  const handleSelectPackage = (pkg) => {
    setSelectedPackage(pkg);
    const expert = experts.find((e) => e.name === decodeURIComponent(name));
    if (expert) {
      fetchAvailableSlots(expert.id, pkg.id); // G·ªçi API slots v·ªõi chuy√™n gia & g√≥i d·ªãch v·ª•
    }
  };
  const getUserBookings = async () => {
    try {
        const token = localStorage.getItem("token");
        const userId = localStorage.getItem("userId");

        if (!userId) {
            console.error("Kh√¥ng t√¨m th·∫•y userId!");
            return [];
        }

        const response = await fetch("/api/booking", {
            method: "GET",
            headers: { "Authorization": `Bearer ${token}` },
        });

        if (!response.ok) {
            throw new Error("Kh√¥ng th·ªÉ l·∫•y l·ªãch ƒë·∫∑t c·ªßa ng∆∞·ªùi d√πng.");
        }

        return await response.json(); // Tr·∫£ v·ªÅ to√†n b·ªô l·ªãch ƒë·∫∑t
    } catch (error) {
        console.error("L·ªói khi l·∫•y danh s√°ch l·ªãch ƒë·∫∑t:", error);
        return [];
    }
};

  
  
const handleBooking = async () => {
  if (!selectedSlot) {
      alert("Vui l√≤ng ch·ªçn m·ªôt khung gi·ªù tr∆∞·ªõc khi ƒë·∫∑t l·ªãch!");
      return;
  }
  if (!selectedPackage) {
      alert("Vui l√≤ng ch·ªçn m·ªôt g√≥i t∆∞ v·∫•n tr∆∞·ªõc khi ƒë·∫∑t l·ªãch!");
      return;
  }

  const expert = experts.find((e) => e.name === decodeURIComponent(name));
  if (!expert) {
      alert("Kh√¥ng t√¨m th·∫•y chuy√™n gia!");
      return;
  }

  const today = new Date().toISOString().split("T")[0];
  const slotStartTime = new Date(`${today}T${selectedSlot.startTime}`).getTime();
  const slotEndTime = new Date(`${today}T${selectedSlot.endTime}`).getTime();

  try {
      const userBookings = (await getUserBookings()).filter(
          (booking) => ["PENDING", "PENDING_PAYMENT", "PROCESSING"].includes(booking.status)
      );

      console.log("L·ªãch h·∫πn c·ªßa user:", userBookings);

      let conflictingExpert = null;

      const isTimeOverlap = (start1, end1, start2, end2) => {
          return start1 && end1 && start2 && end2 && start1 < end2 && end1 > start2;
      };

      for (const booking of userBookings) {
        if (!booking.slotExpert || !booking.slotExpert.slot) {
            console.error("L·ªói: Kh√¥ng c√≥ slot h·ª£p l·ªá!", booking);
            continue; // B·ªè qua l·ªãch b·ªã l·ªói
        }
    
        const bookedStartTime = new Date(`${booking.slotExpert.date}T${booking.slotExpert.slot.startTime}`).getTime();
        const bookedEndTime = new Date(`${booking.slotExpert.date}T${booking.slotExpert.slot.endTime}`).getTime();
    
        console.log(`üîç Ki·ªÉm tra l·ªãch: ${booking.slotExpert.expert.name} (${booking.slotExpert.date} ${booking.slotExpert.slot.startTime} - ${booking.slotExpert.slot.endTime})`);
    
        if (isTimeOverlap(slotStartTime, slotEndTime, bookedStartTime, bookedEndTime)) {
            if (booking.slotExpert.expert.id === expert.id) {
                alert("B·∫°n ƒë√£ c√≥ l·ªãch v·ªõi chuy√™n gia n√†y trong kho·∫£ng th·ªùi gian n√†y!");
                return;
            } else {
                alert(`B·∫°n ƒë√£ ƒë·∫∑t l·ªãch v·ªõi chuy√™n gia ${booking.slotExpert.expert.name} v√†o khung gi·ªù n√†y! Kh√¥ng th·ªÉ ƒë·∫∑t th√™m.`);
                return;
            }
        }
    }
    

      if (conflictingExpert) {
          alert(`B·∫°n ƒë√£ ƒë·∫∑t l·ªãch v√†o khung gi·ªù n√†y v·ªõi chuy√™n gia ${conflictingExpert}!`);
          return;
      }

      const bookingData = {
          expertId: expert.id,
          slotId: selectedSlot.id,
          bookingDate: today,
          serviceIds: selectedPackage.id ? [selectedPackage.id] : [],
      };

      const token = localStorage.getItem("token");
      if (!token) {
          alert("B·∫°n ch∆∞a ƒëƒÉng nh·∫≠p!");
          return;
      }

      const response = await fetch("/api/booking", {
          method: "POST",
          headers: {
              "Content-Type": "application/json",
              "Authorization": `Bearer ${token}`,
          },
          body: JSON.stringify(bookingData),
      });

      const responseText = await response.text();
      let data;
      try {
          data = JSON.parse(responseText);
      } catch (e) {
          data = { message: responseText };
      }

      if (response.ok) {
          alert("ƒê·∫∑t l·ªãch th√†nh c√¥ng!");
          navigate("/my-booking");
      } else {
          alert(`L·ªói: ${data.message || "Kh√¥ng th·ªÉ ƒë·∫∑t l·ªãch!"}`);
      }
  } catch (error) {
      console.error("L·ªói khi x·ª≠ l√Ω ƒë·∫∑t l·ªãch:", error);
      alert("ƒê√£ c√≥ l·ªói x·∫£y ra, vui l√≤ng th·ª≠ l·∫°i!");
  }
};

  

  
  
  
  

  if (!experts || experts.length === 0) {
    return <p>ƒêang t·∫£i d·ªØ li·ªáu chuy√™n gia...</p>;
  }

  const expert = experts.find((e) => e.name === decodeURIComponent(name));
  if (!expert) {
    return <p>Kh√¥ng t√¨m th·∫•y chuy√™n gia!</p>;
  }
  console.log("Danh s√°ch g√≥i tr∆∞·ªõc khi ƒë·∫∑t l·ªãch:", servicePackages);

  
  return (
    <div className={styles.container}>


<div className={styles.card}>
  <div className={styles.avatarContainer}>
    <img
      src={expert.avatar || "/images/experts/default-avatar.png"}
      alt={expert.name}
      className={styles.avatar}
      onError={(e) => (e.target.src = "/images/experts/default-avatar.png")}
    />
  </div>
  <h2>{expert.name}</h2>
  <p>
  <strong>Kinh nghi·ªám:</strong>{" "}
  {experience !== null ? `${experience} nƒÉm` : "ƒêang c·∫≠p nh·∫≠t..."}
</p>
  <p>
    <strong>Chuy√™n m√¥n:</strong> {specialtyMap[expert.specialty] || "Ch∆∞a c·∫≠p nh·∫≠t"}
  </p>

  {specialtyMap[expert.specialty] && (
  <p className={styles.description}>
    <strong>M√¥ t·∫£ chuy√™n m√¥n:</strong>{" "}
    {expertDescriptions[specialtyMap[expert.specialty]] || "Ch∆∞a c√≥ m√¥ t·∫£"}
  </p>
)}

  {expert.certificates && expert.certificates.length > 0 && (
    <div className={styles.certifications}>
      <h3>Ch·ª©ng ch·ªâ:</h3>
      <ul>
        {expert.certificates.map((cert) => (
          <li key={cert.id}>
            {cert.certificateName} -{" "}
            <a href={cert.certificateUrl} target="_blank" rel="noopener noreferrer">
              Xem ch·ª©ng ch·ªâ
            </a>
          </li>
        ))}
      </ul>
    </div>
  )}

  <div className={styles.buttonContainer}>
    <button className={styles.bookButton} onClick={handleGoBack}>
      ‚Üê Quay l·∫°i danh s√°ch chuy√™n gia
    </button>
    <button className={styles.backButton} onClick={fetchServicePackages}>
      ƒê·∫∑t l·ªãch h·∫πn
    </button>
  </div>
</div>;

      {isModalOpen && (
        <div className={styles.modalOverlay}>
          <div className={styles.modal}>
            <h3>Ch·ªçn g√≥i t∆∞ v·∫•n</h3>
            <ul>
              {servicePackages.map((pkg) => (
                <li key={pkg.id} className={styles.packageItem}>
                  <p><strong>{pkg.name}</strong></p>
                  <p>{pkg.description}</p>
                  <p>‚è≥ {pkg.duration} ph√∫t - üí∞ {pkg.price.toLocaleString()} VND</p>
                  <button disabled={!pkg.available} onClick={() => handleSelectPackage(pkg)}>
                    {pkg.available ? "Ch·ªçn" : "H·∫øt ch·ªó"}
                  </button>
                </li>
              ))}
            </ul>
            <button className={styles.closeButton} onClick={() => setIsModalOpen(false)}>ƒê√≥ng</button>
          </div>
        </div>
      )}

{selectedPackage && (
  <div className={styles.modalOverlay}>
    <div className={styles.modal}>
      <h3>Ch·ªçn gi·ªù t∆∞ v·∫•n</h3>
      <ul className={styles.slotContainer}>
  {availableSlots.length === 0 ? (
    <p>Kh√¥ng c√≥ l·ªãch tr·ªëng</p>
  ) : (
    availableSlots.map((slot) => {
      // L·∫•y th·ªùi gian hi·ªán t·∫°i
      const now = new Date();
      
      // T·∫°o ƒë·ªëi t∆∞·ª£ng Date v·ªõi th·ªùi gian c·ªßa slot
      const today = new Date().toISOString().split("T")[0]; // YYYY-MM-DD
      const slotTime = new Date(`${today}T${slot.startTime}`);

      // Ki·ªÉm tra xem slot ƒë√£ qua hay ch∆∞a
      const isPast = slotTime < now;

      return (
        <li
          key={slot.id}
          className={`${styles.slotItem} ${selectedSlot?.id === slot.id ? styles.selectedSlot : ""}`}
        >
          <button 
            onClick={() => !isPast && setSelectedSlot(slot)} 
            disabled={isPast} // Disable n·∫øu slot ƒë√£ qua
          >
            Gi·ªù b·∫Øt ƒë·∫ßu: {slot.startTime.split(":").slice(0, 2).join(":")} - 
            Gi·ªù k·∫øt th√∫c: {slot.endTime.split(":").slice(0, 2).join(":")}
            {selectedSlot?.id === slot.id ? " ‚úÖ" : ""}
            {isPast ? " (H·∫øt h·∫°n)" : ""}
          </button>
        </li>
      );
    })
  )}
</ul>

      <button className={styles.confirmButton} onClick={handleBooking} disabled={isBooking}>
        {isBooking ? "ƒêang ƒë·∫∑t..." : "X√°c nh·∫≠n ƒë·∫∑t l·ªãch"}
      </button>
      <p>{message}</p>
      <button className={styles.closeButton} onClick={() => setSelectedPackage(null)}>Quay l·∫°i</button>
    </div>
    
  </div>
)}
<div className={styles.reviewsSection}>
  <h3>ƒê√°nh gi√° t·ª´ kh√°ch h√†ng</h3>
  {reviews.length > 0 ? (
    <ul className={styles.reviewsList}>
     {currentReviews.map((review, index) => (
  <li key={index} className={styles.reviewItem}>
    <p><strong>{review.user.name}</strong> - ‚≠ê {review.rating}</p>
    <p>{review.comments}</p>
    <p><small>{review.date ? new Date(review.date).toLocaleDateString() : "Ng√†y kh√¥ng x√°c ƒë·ªãnh"}</small></p>
  </li>
))}
    </ul>
  ) : (
    <p>Ch∆∞a c√≥ ƒë√°nh gi√° n√†o.</p>
  )}
   <div className={styles.pagination}>
          <button onClick={prevPage} disabled={currentPage === 1}>
            Trang tr∆∞·ªõc
          </button>
          <span>Trang {currentPage}</span>
          <button
            onClick={nextPage}
            disabled={currentPage === Math.ceil(reviews.length / reviewsPerPage)}
          >
            Trang sau
          </button>
        </div>
</div>


    </div>
  );
};

export default ExpertDetail;