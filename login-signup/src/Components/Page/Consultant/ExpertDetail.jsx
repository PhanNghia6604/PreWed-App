import { useParams } from "react-router-dom";
import { useContext, useState, useEffect } from "react";
import { ExpertContext } from "./ExpertContext";
import expertDescriptions from "../Consultant/ExpertDescription";
import { useNavigate } from "react-router-dom";

import styles from "./ExpertDetail.module.css";

const getRandomExperience = () => Math.floor(Math.random() * 10) + 1;

const ExpertDetail = () => {
  const { name } = useParams();
  const [experts, setExperts] = useState([]);
  const [experience, setExperience] = useState(null);
  const [servicePackages, setServicePackages] = useState([]);
  const [availableSlots, setAvailableSlots] = useState([]);
  const [isModalOpen, setIsModalOpen] = useState(false);
  const [selectedPackage, setSelectedPackage] = useState(null);
  const [selectedSlot, setSelectedSlot] = useState(null);
  const [isBooking, setIsBooking] = useState(false);
  const [message, setMessage] = useState("");
  const [rating, setRating] = useState(null);
  const [reviews, setReviews] = useState([]); // Danh s√°ch ƒë√°nh gi√°


  
  const navigate = useNavigate();
  const handleGoBack = () => {
    navigate("/expert"); // ƒê∆∞·ªùng d·∫´n t·ªõi trang danh s√°ch chuy√™n gia
  };

  useEffect(() => {
    const fetchRating = async () => {
      const token = localStorage.getItem("token"); 

      try {
        const expert = experts.find((e) => e.name === decodeURIComponent(name));
        if (!expert) return;
  
        const response = await fetch(`/api/feedback/${expert.id}`,   {
          method: "Get",
          headers:{
            "Authorization": `Bearer ${token}`, // G·ª≠i token trong headers
          }
          

        });
        if (!response.ok) throw new Error("Kh√¥ng th·ªÉ l·∫•y ƒë√°nh gi√°");
  
        const data = await response.json();
        console.log("üìå ƒê√°nh gi√° chuy√™n gia:", data);
        setRating(data.rating); // Gi·∫£ s·ª≠ API tr·∫£ v·ªÅ { rating: 4.5 }
      } catch (error) {
        console.error("‚ùå L·ªói khi t·∫£i ƒë√°nh gi√°:", error);
      }
    };
  
    fetchRating();
  }, [experts, name]);
  


  
  useEffect(() => {
    const fetchExperts = async () => {
      try {
        const response = await fetch("/api/get");
        if (!response.ok) throw new Error("L·ªói khi t·∫£i danh s√°ch chuy√™n gia");
        
        const data = await response.json();
        console.log("üìå D·ªØ li·ªáu chuy√™n gia t·ª´ API:", data);
  
        // L·ªçc ch·ªâ l·∫•y c√°c chuy√™n gia c√≥ roleEnum l√† "EXPERT"
        const expertList = data.filter((user) => user.roleEnum === "EXPERT");
        setExperts(expertList);
      } catch (error) {
        console.error("‚ùå L·ªói khi t·∫£i danh s√°ch chuy√™n gia:", error);
      }
    };
  
    fetchExperts();
  }, []);
  
  const fetchServicePackages = async () => {
    const token = localStorage.getItem("token"); 
    try {
      const response = await fetch("/api/servicepackage",   {
        method: "Get",
        headers:{
          "Authorization": `Bearer ${token}`, // G·ª≠i token trong headers
        }
      });
      
      if (!response.ok) throw new Error("L·ªói khi t·∫£i g√≥i t∆∞ v·∫•n");
      const data = await response.json();
      setServicePackages(data);
      setIsModalOpen(true);
    } catch (error) {
      console.error(error);
    }
  };

  const fetchAvailableSlots = async () => {
    try {
      const token = localStorage.getItem("token");
  
      const response = await fetch("/api/slots", {
        method: "GET",
        headers: {
          "Authorization": `Bearer ${token}`,
        },
      });
  
      // In ra response ƒë·ªÉ ki·ªÉm tra chi ti·∫øt ph·∫£n h·ªìi t·ª´ API
      console.log("üìå API Response:", response);
  
      if (!response.ok) {
        const errorText = await response.text(); // L·∫•y th√¥ng tin l·ªói n·∫øu c√≥
        throw new Error(`L·ªói API: ${response.status} - ${errorText}`);
      }
  
      const data = await response.json();
      console.log("üìå L·ªãch tr·ªëng nh·∫≠n ƒë∆∞·ª£c:", data);
      
      // N·∫øu API tr·∫£ v·ªÅ m·∫£ng r·ªóng, b√°o l·ªói l·ªãch tr·ªëng
      if (data.length === 0) {
        throw new Error("Kh√¥ng c√≥ l·ªãch tr·ªëng n√†o!");
      }
  
      setAvailableSlots(data);
    } catch (error) {
      console.error("‚ùå L·ªói khi t·∫£i l·ªãch tr·ªëng:", error);
    }
  };
  

  const handleSelectPackage = (pkg) => {
    setSelectedPackage(pkg);
    const expert = experts.find((e) => e.name === decodeURIComponent(name));
    if (expert) {
      fetchAvailableSlots(expert.id, pkg.id); // G·ªçi API slots v·ªõi chuy√™n gia & g√≥i d·ªãch v·ª•
    }
  };
  const handleBooking = async () => {
    if (!selectedSlot) {
      alert("Vui l√≤ng ch·ªçn m·ªôt khung gi·ªù tr∆∞·ªõc khi ƒë·∫∑t l·ªãch!");
      return;
    }
  
    const expert = experts.find((e) => e.name === decodeURIComponent(name));
    if (!expert) {
      alert("Kh√¥ng t√¨m th·∫•y chuy√™n gia!");
      return;
    }
  
    console.log("üîç Ki·ªÉm tra d·ªØ li·ªáu tr∆∞·ªõc khi g·ª≠i:");
    console.log("Expert ID:", expert.id);
    console.log("Slot ID:", selectedSlot.id);
    console.log("Th·ªùi gian:", selectedSlot.startTime, "-", selectedSlot.endTime);
  
    // Ki·ªÉm tra ID h·ª£p l·ªá
    if (!expert.id || !selectedSlot.id) {
      console.error("‚ùå L·ªói: expertId ho·∫∑c slotId kh√¥ng h·ª£p l·ªá!");
      alert("C√≥ l·ªói x·∫£y ra, vui l√≤ng th·ª≠ l·∫°i!");
      return;
    }
  
    const bookingData = {
      expertId: expert.id,
      slotId: selectedSlot.id,
      bookingDate: new Date().toISOString().split("T")[0], // L·∫•y ng√†y h√¥m nay
      serviceIds: selectedPackage?.id ? [selectedPackage.id] : [], // B·ªè [0] ƒë·ªÉ tr√°nh l·ªói
    };
  
    console.log("üì¶ Payload g·ª≠i l√™n API:", bookingData);
  
    try {
      const token = localStorage.getItem("token");
      const response = await fetch("/api/booking", {
        method: "POST",
        headers: {
          "Content-Type": "application/json",
          "Authorization": `Bearer ${token}`,
        },
        body: JSON.stringify(bookingData),
      });
  
      const responseText = await response.text(); // Ki·ªÉm tra ph·∫£n h·ªìi API
      console.log("üì® Ph·∫£n h·ªìi t·ª´ server (raw text):", responseText);
  
      try {
        const data = JSON.parse(responseText); // Ch·ªâ parse JSON n·∫øu ph·∫£n h·ªìi h·ª£p l·ªá
        console.log("üì® Ph·∫£n h·ªìi t·ª´ server (JSON):", data);
  
        if (response.ok) {
          navigate("/my-booking");
          alert("ƒê·∫∑t l·ªãch th√†nh c√¥ng!");
        } else {
          alert(`L·ªói: ${data.message || "Kh√¥ng th·ªÉ ƒë·∫∑t l·ªãch"}`);
        }
      } catch (jsonError) {
        console.error("‚ùå L·ªói khi parse JSON:", jsonError);
        alert("Ph·∫£n h·ªìi t·ª´ server kh√¥ng h·ª£p l·ªá!");
      }
    } catch (error) {
      console.error("‚ùå L·ªói khi g·ª≠i y√™u c·∫ßu ƒë·∫∑t l·ªãch:", error);
      alert("ƒê√£ c√≥ l·ªói x·∫£y ra, vui l√≤ng th·ª≠ l·∫°i!");
    }
  };
  
  
  

  
  
  
  
  

  if (!experts || experts.length === 0) {
    return <p>ƒêang t·∫£i d·ªØ li·ªáu chuy√™n gia...</p>;
  }

  const expert = experts.find((e) => e.name === decodeURIComponent(name));
  if (!expert) {
    return <p>Kh√¥ng t√¨m th·∫•y chuy√™n gia!</p>;
  }
  console.log("Danh s√°ch g√≥i tr∆∞·ªõc khi ƒë·∫∑t l·ªãch:", servicePackages);

  
  return (
    <div className={styles.container}>


      <div className={styles.card}>
        <div className={styles.avatarContainer}>
          <img
            src={expert.avatar || "/images/experts/default-avatar.png"}
            alt={expert.name}
            className={styles.avatar}
            onError={(e) => (e.target.src = "/images/experts/default-avatar.png")}
          />
        </div>
        <h2>{expert.name}</h2>
        <p><strong>Kinh nghi·ªám:</strong> {experience} nƒÉm</p>
        <p><strong>Chuy√™n m√¥n:</strong> {expert.specialty}</p>
        <p><strong>ƒê√°nh gi√°:</strong> ‚≠ê {rating !== null ? rating : "Ch∆∞a c√≥ ƒë√°nh gi√°"} / 5</p>
        {expert.specialty && (
          <p className={styles.description}>
            <strong>M√¥ t·∫£ chuy√™n m√¥n:</strong> {expertDescriptions[expert.specialty] || "Ch∆∞a c√≥ m√¥ t·∫£"}
          </p>
        )}
        {expert.certificates && expert.certificates.length > 0 && (
          <div className={styles.certifications}>
            <h3>Ch·ª©ng ch·ªâ:</h3>
            <ul>
              {expert.certificates.map((cert, index) => (
                <li key={index}>{cert}</li>
              ))}
            </ul>
          </div>
        )}
        <button className={styles.bookButton} onClick={fetchServicePackages}>
          ƒê·∫∑t l·ªãch h·∫πn
        </button>
        <button className={styles.backButton} onClick={handleGoBack}>
          ‚Üê Quay l·∫°i danh s√°ch chuy√™n gia
        </button>

      </div>


      {isModalOpen && (
        <div className={styles.modalOverlay}>
          <div className={styles.modal}>
            <h3>Ch·ªçn g√≥i t∆∞ v·∫•n</h3>
            <ul>
              {servicePackages.map((pkg) => (
                <li key={pkg.id} className={styles.packageItem}>
                  <p><strong>{pkg.name}</strong></p>
                  <p>{pkg.description}</p>
                  <p>‚è≥ {pkg.duration} ph√∫t - üí∞ {pkg.price.toLocaleString()} VND</p>
                  <button disabled={!pkg.available} onClick={() => handleSelectPackage(pkg)}>
                    {pkg.available ? "Ch·ªçn" : "H·∫øt ch·ªó"}
                  </button>
                </li>
              ))}
            </ul>
            <button className={styles.closeButton} onClick={() => setIsModalOpen(false)}>ƒê√≥ng</button>
          </div>
        </div>
      )}

{selectedPackage && (
  <div className={styles.modalOverlay}>
    <div className={styles.modal}>
      <h3>Ch·ªçn gi·ªù t∆∞ v·∫•n</h3>
      <ul className={styles.slotContainer}>
      {availableSlots.length === 0 ? (
  <p>Kh√¥ng c√≥ l·ªãch tr·ªëng</p>
) : (
  availableSlots.map((slot) => (
    <li
      key={slot.id}
      className={`${styles.slotItem} ${selectedSlot?.id === slot.id ? styles.selectedSlot : ""}`}
    >
      <button onClick={() => setSelectedSlot(slot)}>
        Gi·ªù b·∫Øt ƒë·∫ßu: {slot.startTime.split(":").slice(0, 2).join(":")} - Gi·ªù k·∫øt th√∫c: {slot.endTime.split(":").slice(0, 2).join(":")}
        {selectedSlot?.id === slot.id ? " ‚úÖ" : ""}
      </button>
    </li>
  ))
)}
</ul>
      <button className={styles.confirmButton} onClick={handleBooking} disabled={isBooking}>
        {isBooking ? "ƒêang ƒë·∫∑t..." : "X√°c nh·∫≠n ƒë·∫∑t l·ªãch"}
      </button>
      <p>{message}</p>
      <button className={styles.closeButton} onClick={() => setSelectedPackage(null)}>Quay l·∫°i</button>
    </div>
    
  </div>
)}


    </div>
  );
};

export default ExpertDetail;